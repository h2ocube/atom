"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require("underscore");
var diff = require("./diff");
var tm = require("./treeModel");
var Position;
(function (Position) {
    Position[Position["Before"] = 0] = "Before";
    Position[Position["After"] = 1] = "After";
})(Position || (Position = {}));
;
var CompositeDisposable = (function () {
    function CompositeDisposable() {
        this.items = [];
    }
    CompositeDisposable.prototype.add = function (d) {
        this.items.push(d);
    };
    CompositeDisposable.prototype.remove = function (d) {
        this.items = this.items.filter(function (x) { return x != d; });
    };
    CompositeDisposable.prototype.dispose = function () {
        this.items.forEach(function (x) { return x.dispose(); });
    };
    return CompositeDisposable;
}());
exports.CompositeDisposable = CompositeDisposable;
(function (StatusCode) {
    StatusCode[StatusCode["OK"] = 0] = "OK";
    StatusCode[StatusCode["WARNING"] = 1] = "WARNING";
    StatusCode[StatusCode["ERROR"] = 2] = "ERROR";
})(exports.StatusCode || (exports.StatusCode = {}));
var StatusCode = exports.StatusCode;
var BasicBinding = (function () {
    function BasicBinding(value) {
        if (value === void 0) { value = null; }
        this.value = value;
        this.listeners = [];
        this.validators = [];
        this.slisteners = [];
    }
    BasicBinding.prototype.addValidator = function (v) {
        this.validators.push(v);
    };
    BasicBinding.prototype.removeValidator = function (v) {
        this.validators = this.validators.filter(function (x) { return x != v; });
    };
    BasicBinding.prototype.addStatusListener = function (s) {
        this.slisteners.push(s);
    };
    BasicBinding.prototype.removeStatusListener = function (s) {
        this.slisteners = this.slisteners.filter(function (x) { return x != s; });
    };
    BasicBinding.prototype.status = function () {
        return this._status;
    };
    BasicBinding.prototype.setStatus = function (newStatus) {
        if (this._status != newStatus) {
            this.slisteners.forEach(function (listener) { return listener(newStatus); });
        }
        this._status = newStatus;
    };
    BasicBinding.prototype.get = function () {
        return this.value;
    };
    BasicBinding.prototype.set = function (v) {
        var _this = this;
        if (this.value != v) {
            var oldValue = this.value;
            this.value = v;
            var ns = { code: StatusCode.OK, message: "" };
            this.validators.forEach(function (x) {
                var s = x(v);
                if (s.code > ns.code)
                    ns = s;
            });
            this.setStatus(ns);
            this.listeners.forEach(function (listener) { return listener(v, oldValue, _this); });
        }
        return oldValue;
    };
    BasicBinding.prototype.addListener = function (listener) {
        this.listeners.push(listener);
    };
    BasicBinding.prototype.removeListener = function (listener) {
        this.listeners = this.listeners.filter(function (x) { return x != listener; });
    };
    return BasicBinding;
}());
exports.BasicBinding = BasicBinding;
var BasicComponent = (function () {
    function BasicComponent(_tagName, icon) {
        var _this = this;
        if (icon === void 0) { icon = null; }
        this._tagName = _tagName;
        // Disabled
        this._disabled = false;
        this._children = [];
        this.focusListeners = [];
        this._onAltClickListeners = [];
        this._onKeyUpListeners = [];
        this._onKeyDownListeners = [];
        this._onKeyPressListeners = [];
        this._bListener = function (x) {
            if (!_this.inSet) {
                _this.handleDataChanged();
            }
        };
        this._binding = this.createBinding();
        this._extraClasses = [];
        this._extraStyles = {};
        this.inSet = false;
        this.disposable = new CompositeDisposable();
        this.wasDisposed = false;
        this._display = true;
        this._onClickListeners = [];
        this.firstInit = false;
        this.focusPropagator = function (x) {
            _this.focusListeners.forEach(function (y) { return y(_this); });
        };
        this.destroyListener = function (x) {
            //x.stopPropagation();
            if (x.srcElement == _this._ui && _this.dispose) {
                _this.dispose();
            }
            x.srcElement.onfocus = null;
            x.srcElement.onclick = null;
            x.srcElement.removeEventListener("DOMNodeRemovedFromDocument", _this.destroyListener);
        };
        this._icon = icon;
    }
    BasicComponent.prototype.id = function () {
        return this._id;
    };
    BasicComponent.prototype.setId = function (id) {
        this._id = id;
        return this;
    };
    BasicComponent.prototype.disabled = function () { return this._disabled; };
    BasicComponent.prototype.setDisabled = function (disabled) { this._disabled = disabled; this.handleLocalChange(); };
    BasicComponent.prototype.setTabIndex = function (index) {
        this.ui().tabIndex = index;
    };
    BasicComponent.prototype.createBinding = function () {
        var b = new BasicBinding();
        b.addListener(this._bListener);
        return b;
    };
    BasicComponent.prototype.addFocusListener = function (e) {
        this.focusListeners.push(e);
    };
    BasicComponent.prototype.removeFocusListener = function (e) {
        this.focusListeners = this.focusListeners.filter(function (x) { return x != e; });
    };
    BasicComponent.prototype.addAltClickListener = function (e) {
        this._onAltClickListeners.push(e);
    };
    BasicComponent.prototype.removeAltClickListener = function (e) {
        this._onAltClickListeners = this._onAltClickListeners.filter(function (x) { return x != e; });
    };
    BasicComponent.prototype.addKeyDownListener = function (e) {
        this._onKeyDownListeners.push(e);
    };
    BasicComponent.prototype.removeKeyDownListener = function (e) {
        this._onKeyDownListeners = this._onKeyDownListeners.filter(function (x) { return x != e; });
    };
    BasicComponent.prototype.addKeyUpListener = function (e) {
        this._onKeyUpListeners.push(e);
    };
    BasicComponent.prototype.removeKeyUpListener = function (e) {
        this._onKeyUpListeners = this._onKeyUpListeners.filter(function (x) { return x != e; });
    };
    BasicComponent.prototype.addKeyPressListener = function (e) {
        this._onKeyPressListeners.push(e);
    };
    BasicComponent.prototype.removeKeyPressListener = function (e) {
        this._onKeyPressListeners = this._onKeyPressListeners.filter(function (x) { return x != e; });
    };
    BasicComponent.prototype.pad = function (left, right) {
        this.padding_left = left;
        this.padding_right = right;
        return this;
    };
    BasicComponent.prototype.margin = function (left, right, top, bottom) {
        if (top === void 0) { top = null; }
        if (bottom === void 0) { bottom = null; }
        this.margin_left = left;
        this.margin_right = right;
        this.margin_bottom = bottom;
        this.margin_top = top;
        return this;
    };
    BasicComponent.prototype.getAssociatedValue = function () {
        if (this._binding) {
            return this._binding.get();
        }
        return null;
    };
    BasicComponent.prototype.setAssociatedValue = function (v) {
        this.inSet = true;
        try {
            this._binding.set(v);
        }
        finally {
            this.inSet = false;
        }
    };
    BasicComponent.prototype.getStyle = function () {
        return this._extraStyles;
    };
    BasicComponent.prototype.caption = function () {
        return this._caption;
    };
    BasicComponent.prototype.setCaption = function (s) {
        this._caption = s;
        this.handleLocalChange();
        return this;
    };
    BasicComponent.prototype.setIcon = function (icon) {
        this._icon = icon;
        this.handleLocalChange();
    };
    BasicComponent.prototype.getIcon = function () {
        return this._icon;
    };
    BasicComponent.prototype.setStyle = function (s, value) {
        this._extraStyles[s] = value;
        this.handleLocalChange();
        return this;
    };
    BasicComponent.prototype.removeStyle = function (s) {
        delete this._extraStyles[s];
    };
    BasicComponent.prototype.hasClass = function (className) {
        return this._extraClasses.indexOf(className) != -1;
    };
    BasicComponent.prototype.clearUI = function () {
        this._ui = null;
    };
    BasicComponent.prototype.applyTooltip = function (tooltip) {
        var tooltipText = hc(tooltip).renderUI().innerHTML;
        var outer = this;
        this.tooltipComponentListener = {
            changed: function (b) {
                outer.disposable.remove(outer.tooltipHandle);
                outer.tooltipHandle.dispose();
                if (outer.tooltipComponent) {
                    outer.applyTooltip(outer.tooltipComponent);
                }
            }
        };
        tooltip.addComponentListener(this.tooltipComponentListener);
        var tooltipv = atom.tooltips.add(this.ui(), {
            //TODO SEPARATE STYLE
            title: '<div class="raml-console-tooltip">' + tooltipText + '</div>',
            delay: 100,
            html: true
        });
        this.tooltipHandle = tooltipv;
        this.disposable.add(tooltipv);
    };
    BasicComponent.prototype.handleDataChanged = function () { };
    BasicComponent.prototype.setTooltip = function (t) {
        return null;
        // this.disposeTooltipListeners();
        // this.tooltipComponent = t;
        // this.handleLocalChange();
        // return this;
    };
    BasicComponent.prototype.disposeTooltipListeners = function () {
        if (this.tooltipComponent && this.tooltipComponentListener) {
            this.tooltipComponent.removeComponentListener(this.tooltipComponentListener);
            this.tooltipComponentListener = null;
            this.tooltipHandle.dispose();
            this.disposable.remove(this.tooltipHandle);
        }
    };
    /**
     * may be called multiple times
     */
    BasicComponent.prototype.dispose = function () {
        this.disposable.dispose();
        this._children.forEach(function (x) { x.dispose(); });
        if (this._ui) {
            this._ui.onfocus = null;
            this._ui.onclick = null;
            this._ui.removeEventListener("DOMNodeRemovedFromDocument", this.destroyListener);
            this._ui = null;
        }
        this._parent = null;
        this.wasDisposed = true;
    };
    BasicComponent.prototype.getPercentWidth = function () {
        return this._percentWidth;
    };
    BasicComponent.prototype.setPercentWidth = function (value) {
        this._percentWidth = value;
        this.handleLocalChange();
        return this;
    };
    BasicComponent.prototype.getPercentHeight = function () {
        return this._percentHeight;
    };
    BasicComponent.prototype.setPercentHeight = function (value) {
        this._percentHeight = value;
        this.handleLocalChange();
        return this;
    };
    BasicComponent.prototype.setDisplay = function (display) {
        this._display = display;
        this.handleLocalChange();
    };
    BasicComponent.prototype.getDisplay = function () {
        return this._display;
    };
    BasicComponent.prototype.addClass = function (token) {
        this._extraClasses.push(token);
        if (this._ui) {
            this._ui.classList.add(token);
        }
        return this;
    };
    BasicComponent.prototype.removeClass = function (token) {
        this._extraClasses = this._extraClasses.filter(function (x) { return x != token; });
        if (this._ui) {
            this._ui.classList.remove(token);
        }
    };
    BasicComponent.prototype.addOnClickListener = function (ev) {
        this._onClickListeners.push(ev);
        this.handleLocalChange();
    };
    BasicComponent.prototype.removeOnClickListener = function (ev) {
        this._onClickListeners = this._onClickListeners.filter(function (x) { return x != ev; });
        this.handleLocalChange();
    };
    BasicComponent.prototype.ui = function () {
        if (this._ui == null)
            this._ui = this.renderUI();
        return this._ui;
    };
    BasicComponent.prototype.refresh = function () {
        var ui = this.renderUI();
        if (this._ui != null && this._ui.parentNode != null)
            this._ui.parentNode.replaceChild(ui, this._ui);
        this._ui = ui;
    };
    BasicComponent.prototype.setTagName = function (s) {
        this._tagName = s;
    };
    BasicComponent.prototype.setBinding = function (b) {
        this._binding = b;
        b.addListener(this._bListener);
        this.handleDataChanged();
    };
    BasicComponent.prototype.getBinding = function () {
        return this._binding;
    };
    BasicComponent.prototype.selfInit = function () { };
    BasicComponent.prototype.renderUI = function () {
        var start = this.selfRender();
        this._ui = start;
        if (!this.firstInit) {
            this.selfInit();
            this.firstInit = true;
        }
        this.customize(start);
        this._children.filter(function (x) { return x != null; }).forEach(function (child) { return start.appendChild(child.ui()); });
        var footer = this.selfRenderFooter();
        if (footer) {
            start.appendChild(footer);
        }
        return start;
    };
    BasicComponent.prototype.customize = function (element) {
        var _this = this;
        if (this._icon) {
            if (element.classList.contains("icon")) {
                element.classList.remove(this._oldIcon);
            }
            else {
                element.classList.add("icon");
            }
            var v = iconToClass(this._icon);
            this._oldIcon = v;
            element.classList.add(v);
        }
        else {
            if (element.classList.contains("icon")) {
                element.classList.remove(this._oldIcon);
            }
        }
        element.onfocus = this.focusPropagator;
        element.addEventListener("DOMNodeRemovedFromDocument", this.destroyListener);
        //TODO  HANDLE LYFECICLE
        if (this.tooltipComponent) {
            this.applyTooltip(this.tooltipComponent);
        }
        if (this._onClickListeners.length > 0 || this._onAltClickListeners.length > 0) {
            element.onclick = function (event) {
                if (!_this.disabled()) {
                    var listeners;
                    if (event.altKey) {
                        listeners = _this._onAltClickListeners;
                    }
                    else {
                        listeners = _this._onClickListeners;
                    }
                    listeners.forEach(function (listener) { return listener(_this); });
                    event.stopPropagation();
                }
            };
        }
        else {
            element.onclick = null;
        }
        if (this._onKeyDownListeners.length > 0) {
            element.onkeydown = function (event) {
                _this._onKeyDownListeners.forEach(function (listener) { return listener(_this, event); });
            };
        }
        if (this._onKeyUpListeners.length > 0) {
            element.onkeydown = function (event) {
                _this._onKeyUpListeners.forEach(function (listener) { return listener(_this, event); });
            };
        }
        if (this._onKeyPressListeners.length > 0) {
            element.onkeydown = function (event) {
                _this._onKeyPressListeners.forEach(function (listener) { return listener(_this, event); });
            };
        }
        var styleString = "";
        if (this._percentWidth) {
            styleString += "width:" + this._percentWidth + "%;";
        }
        if (this._percentHeight) {
            styleString += "width:" + this._percentHeight + "%;";
        }
        if (this._extraStyles) {
            for (var k in this._extraStyles) {
                styleString += k + ":" + this._extraStyles[k] + (";");
            }
        }
        if (this.disabled()) {
            styleString += "color: gray;text-decoration:none;"; //FIXME
        }
        if (this.padding_left) {
            styleString += "padding-left:" + this.padding_left + "px;";
        }
        if (this.padding_right) {
            styleString += "padding-right:" + this.padding_right + "px;";
        }
        if (this.margin_left) {
            styleString += "margin-left:" + this.margin_left + "px;";
        }
        if (this.margin_right) {
            styleString += "margin-right:" + this.margin_right + "px;";
        }
        if (this.margin_bottom) {
            styleString += "margin-bottom:" + this.margin_bottom + "px;";
        }
        if (this.margin_right) {
            styleString += "margin-top:" + this.margin_top + "px;";
        }
        if (this._display == false) {
            styleString += "display:none";
        }
        element.setAttribute("style", styleString);
        this._extraClasses.forEach(function (x) { return element.classList.add(x); });
        //element.onfocus
    };
    /**
     *
     * @returns not null element;
     */
    BasicComponent.prototype.selfRender = function () {
        return document.createElement(this._tagName);
    };
    BasicComponent.prototype.selfRenderFooter = function () {
        return null;
    };
    BasicComponent.prototype.parent = function () {
        return this._parent;
    };
    BasicComponent.prototype.setParent = function (p) {
        if (this._parent != null)
            this._parent.removeChild(this);
        this._parent = p;
    };
    BasicComponent.prototype.clear = function () {
        for (var i = 0; i < this._children.length; i++)
            try {
                this._ui.removeChild(this._children[i].ui());
            }
            catch (e) { }
        this._children = [];
    };
    BasicComponent.prototype.addChild = function (child, before, after) {
        if (before === void 0) { before = null; }
        if (child == null)
            return;
        var ui = this.ui();
        child.setParent(this);
        if (before == null) {
            if (after == true || after == undefined) {
                ui.appendChild(child.ui());
                this._children.push(child);
            }
            else {
                ui.insertBefore(child.ui(), ui.firstChild);
                this._children.splice(0, 0, child);
            }
        }
        else {
            var bui = before.ui();
            ui.insertBefore(child.ui(), after ? bui.nextElementSibling : bui);
            this._children.splice(this._children.indexOf(before), 0, child);
        }
        this.changed();
    };
    BasicComponent.prototype.removeChild = function (child) {
        //child.dispose();
        this._children = this._children.filter(function (x) { return x != child; });
        if (this._ui) {
            try {
                this._ui.removeChild(child.ui());
            }
            catch (e) { }
        }
        this.changed();
    };
    BasicComponent.prototype.replaceChild = function (newChild, oldChild) {
        this.addChild(newChild, oldChild);
        this.removeChild(oldChild);
    };
    BasicComponent.prototype.addComponentListener = function (cl) {
        if (!this.componentListeners) {
            this.componentListeners = [];
        }
        this.componentListeners.push(cl);
    };
    BasicComponent.prototype.removeComponentListener = function (cl) {
        if (this.componentListeners) {
            this.componentListeners = this.componentListeners.filter(function (x) { return x != cl; });
        }
    };
    BasicComponent.prototype.handleLocalChange = function () {
        var _this = this;
        if (this.componentListeners) {
            this.componentListeners.forEach(function (x) { return x.changed(_this); });
        }
        if (this._ui) {
            this.customize(this._ui);
        }
    };
    BasicComponent.prototype.changed = function () {
        if (this._parent) {
            this._parent.changed();
        }
    };
    BasicComponent.prototype.children = function () {
        return [].concat(this._children);
    };
    BasicComponent.prototype.isAttached = function () {
        if (this._parent) {
            return this._parent.isAttached();
        }
        return false;
    };
    return BasicComponent;
}());
exports.BasicComponent = BasicComponent;
var CheckBox = (function (_super) {
    __extends(CheckBox, _super);
    function CheckBox(caption, icon, _onchange) {
        _super.call(this, "div", icon);
        this._onchange = _onchange;
        this._required = false;
        this.value = false;
        this.setCaption(caption);
    }
    CheckBox.prototype.getActualField = function () {
        return this;
    };
    CheckBox.prototype.setLabelWidth = function (w) { };
    CheckBox.prototype.setLabelHeight = function (h) { this.getActualField().setStyle("line-height", h + "px"); };
    CheckBox.prototype.setRequired = function (b) {
        this._required = b;
    };
    CheckBox.prototype.handleDataChanged = function () {
        this.setValue(this.getBinding().get());
        return _super.prototype.handleDataChanged.call(this);
    };
    CheckBox.prototype.selfInit = function () {
        var _this = this;
        var element = this.ui();
        element.classList.add("checkbox");
        element.classList.add("settings-view");
        element.classList.add("pane-item");
        var cl = document.createElement("input");
        cl.type = "checkbox";
        this.actualInput = cl;
        cl.checked = this.value;
        cl.onchange = function (x) { var value = _this.getValue(); _this.setAssociatedValue(value); _this._onchange(_this, value); };
        var id = "check" + (CheckBox.num++);
        cl.id = id;
        var label = document.createElement("label");
        label.htmlFor = id;
        element.appendChild(label);
        label.appendChild(cl);
        var title = document.createElement("div");
        title.classList.add("setting-title");
        title.setAttribute("style", "display:inline;");
        title.textContent = this.caption();
        label.appendChild(title);
        var description = document.createElement("div");
        description.classList.add("setting-description");
        //description.textContent="some description";
        element.appendChild(description);
    };
    CheckBox.prototype.setValue = function (v) {
        if (this.actualInput) {
            this.actualInput.checked = v;
        }
        this.value = v;
    };
    CheckBox.prototype.getValue = function () {
        return this.actualInput.checked;
    };
    CheckBox.prototype.refresh = function () {
        this.actualInput.value = this.caption();
    };
    CheckBox.num = 0;
    return CheckBox;
}(BasicComponent));
exports.CheckBox = CheckBox;
var RadioButton = (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton(caption, _rid, icon, _onchange) {
        _super.call(this, "div", icon);
        this._rid = _rid;
        this._onchange = _onchange;
        this._required = false;
        this.value = false;
        this.setCaption(caption);
    }
    RadioButton.prototype.getActualField = function () {
        return this;
    };
    RadioButton.prototype.setLabelWidth = function (w) { };
    RadioButton.prototype.setLabelHeight = function (h) { };
    RadioButton.prototype.setRequired = function (b) {
        this._required = b;
    };
    RadioButton.prototype.handleDataChanged = function () {
        this.setValue(this.getBinding().get());
        return _super.prototype.handleDataChanged.call(this);
    };
    RadioButton.prototype.selfInit = function () {
        var _this = this;
        var element = this.ui();
        element.classList.add("radio");
        element.classList.add("settings-view");
        element.classList.add("pane-item");
        var cl = document.createElement("input");
        cl.type = "radio";
        this.actualInput = cl;
        cl.checked = this.value;
        cl.onchange = function (x) { var v = _this.getValue(); _this.setAssociatedValue(v); _this._onchange(_this, v); };
        cl.name = this.id();
        var label = document.createElement("label");
        label.htmlFor = cl.id;
        element.appendChild(label);
        label.appendChild(cl);
        var title = document.createElement("div");
        title.classList.add("setting-title");
        title.setAttribute("style", "display:inline;");
        title.textContent = this.caption();
        label.appendChild(title);
        var description = document.createElement("div");
        description.classList.add("setting-description");
        element.appendChild(description);
    };
    RadioButton.prototype.id = function () { return this._rid; };
    RadioButton.prototype.setId = function (id) { this._rid = id; return this; };
    RadioButton.prototype.setValue = function (v) {
        if (this.actualInput) {
            this.actualInput.checked = v;
        }
        this.value = v;
    };
    RadioButton.prototype.getValue = function () {
        return this.actualInput.checked;
    };
    RadioButton.prototype.refresh = function () {
        this.actualInput.value = this.caption();
    };
    return RadioButton;
}(BasicComponent));
exports.RadioButton = RadioButton;
var Select = (function (_super) {
    __extends(Select, _super);
    function Select(caption, onChange, ic) {
        if (onChange === void 0) { onChange = function (x) { return x; }; }
        if (ic === void 0) { ic = null; }
        _super.call(this, "div", ic);
        this.onChange = onChange;
        this._options = [];
        this.setCaption(caption);
    }
    Select.prototype.getOptions = function () {
        return this._options;
    };
    Select.prototype.setOptions = function (options) {
        this._options = options;
        this.handleLocalChange();
    };
    Select.prototype.handleLocalChange = function () {
        _super.prototype.handleLocalChange.call(this);
        if (this._select)
            this._select.disabled = this.disabled();
    };
    Select.prototype.handleDataChanged = function () {
        this._value = this.getBinding().get();
        if (this.ui()) {
            this._select.value = this._value;
        }
        return _super.prototype.handleDataChanged.call(this);
    };
    Select.prototype.selfInit = function () {
        var _this = this;
        this.ui().classList.add("settings-view");
        this._select = document.createElement("select");
        this.ui().appendChild(this._select);
        this._select.classList.add("form-control");
        this._options.forEach(function (x) {
            var opt = document.createElement("option");
            opt.text = x;
            opt.value = x;
            _this._select.appendChild(opt);
        });
        this._select.value = this._value;
        this._select.disabled = this.disabled();
        this._select.onchange = function (e) {
            var newValue = _this.getValue();
            _this.setAssociatedValue(newValue);
            _this.onChange(_this, newValue);
        };
    };
    Select.prototype.getValue = function () {
        if (this.ui())
            this._value = this._select.value;
        return this._value;
    };
    Select.prototype.setValue = function (vl, fire) {
        this._value = vl;
        if (this.ui()) {
            this._select.value = vl;
        }
        if (fire)
            this.onChange(this, this.getValue());
    };
    return Select;
}(BasicComponent));
exports.Select = Select;
var TextElement = (function (_super) {
    __extends(TextElement, _super);
    function TextElement(tag, txt, icon) {
        if (txt === void 0) { txt = ""; }
        if (icon === void 0) { icon = null; }
        _super.call(this, tag, icon);
        this._text = "";
        if (typeof (txt) == 'object') {
            this._binding = txt;
            this._binding.addListener(this._bListener);
            this._text = this.getBinding().get();
        }
        else
            this._text = txt;
    }
    TextElement.prototype.getText = function () {
        return this._text;
    };
    TextElement.prototype.setText = function (value, handle) {
        if (handle === void 0) { handle = true; }
        this._text = value;
        if (handle)
            this.handleLocalChange();
    };
    TextElement.prototype.handleDataChanged = function () {
        this.setText(this.getBinding().get());
        _super.prototype.handleDataChanged.call(this);
    };
    TextElement.prototype.caption = function () {
        if (!_super.prototype.caption.call(this))
            return this._text;
        else
            return _super.prototype.caption.call(this);
    };
    TextElement.prototype.customize = function (element) {
        element.textContent = this._text;
        _super.prototype.customize.call(this, element);
    };
    return TextElement;
}(BasicComponent));
exports.TextElement = TextElement;
var InlineHTMLElement = (function (_super) {
    __extends(InlineHTMLElement, _super);
    function InlineHTMLElement(tag, txt, icon) {
        if (txt === void 0) { txt = ""; }
        if (icon === void 0) { icon = null; }
        _super.call(this, tag, icon);
        this._text = "";
        this._text = txt;
    }
    InlineHTMLElement.prototype.getText = function () {
        return this._text;
    };
    InlineHTMLElement.prototype.setText = function (value) {
        this._text = value;
        this.handleLocalChange();
    };
    InlineHTMLElement.prototype.handleDataChanged = function () {
        this.setText(this.getBinding().get());
        _super.prototype.handleDataChanged.call(this);
    };
    InlineHTMLElement.prototype.customize = function (element) {
        element.innerHTML = this._text;
        _super.prototype.customize.call(this, element);
    };
    return InlineHTMLElement;
}(BasicComponent));
exports.InlineHTMLElement = InlineHTMLElement;
var Label = (function (_super) {
    __extends(Label, _super);
    function Label(txt, icon) {
        if (txt === void 0) { txt = ""; }
        if (icon === void 0) { icon = null; }
        _super.call(this, "label", txt, icon);
    }
    return Label;
}(TextElement));
exports.Label = Label;
var Panel = (function (_super) {
    __extends(Panel, _super);
    function Panel(_layoutType) {
        if (_layoutType === void 0) { _layoutType = LayoutType.BLOCK; }
        _super.call(this, _layoutType == LayoutType.BLOCK ? "div" : "span");
        this._layoutType = _layoutType;
        this.addClass(layoutTypeToString(_layoutType));
    }
    Panel.prototype.addChild = function (child, before) {
        _super.prototype.addChild.call(this, child, before);
        if (this._layoutType == LayoutType.BLOCK)
            alignComponents(this._children);
    };
    Panel.prototype.renderUI = function (align) {
        if (align === void 0) { align = true; }
        var renderedUI = _super.prototype.renderUI.call(this);
        if (align && this._layoutType == LayoutType.BLOCK)
            alignComponents(this._children);
        return renderedUI;
    };
    return Panel;
}(BasicComponent));
exports.Panel = Panel;
var WrapPanel = (function (_super) {
    __extends(WrapPanel, _super);
    function WrapPanel() {
        _super.apply(this, arguments);
    }
    WrapPanel.prototype.setLabelWidth = function (n) {
        if (this.children().length > 0) {
            this.children()[0].setLabelWidth(n);
        }
    };
    WrapPanel.prototype.setLabelHeight = function (n) {
    };
    return WrapPanel;
}(Panel));
exports.WrapPanel = WrapPanel;
(function (ButtonSizes) {
    ButtonSizes[ButtonSizes["NORMAL"] = 0] = "NORMAL";
    ButtonSizes[ButtonSizes["EXTRA_SMALL"] = 1] = "EXTRA_SMALL";
    ButtonSizes[ButtonSizes["SMALL"] = 2] = "SMALL";
    ButtonSizes[ButtonSizes["LARGE"] = 3] = "LARGE";
})(exports.ButtonSizes || (exports.ButtonSizes = {}));
var ButtonSizes = exports.ButtonSizes;
(function (ButtonHighlights) {
    ButtonHighlights[ButtonHighlights["NO_HIGHLIGHT"] = 0] = "NO_HIGHLIGHT";
    ButtonHighlights[ButtonHighlights["PRIMARY"] = 1] = "PRIMARY";
    ButtonHighlights[ButtonHighlights["INFO"] = 2] = "INFO";
    ButtonHighlights[ButtonHighlights["SUCCESS"] = 3] = "SUCCESS";
    ButtonHighlights[ButtonHighlights["WARNING"] = 4] = "WARNING";
    ButtonHighlights[ButtonHighlights["ERROR"] = 5] = "ERROR";
})(exports.ButtonHighlights || (exports.ButtonHighlights = {}));
var ButtonHighlights = exports.ButtonHighlights;
(function (TextClasses) {
    TextClasses[TextClasses["NORMAL"] = 0] = "NORMAL";
    TextClasses[TextClasses["SMALLER"] = 1] = "SMALLER";
    TextClasses[TextClasses["SUBTLE"] = 2] = "SUBTLE";
    TextClasses[TextClasses["HIGHLIGHT"] = 3] = "HIGHLIGHT";
    TextClasses[TextClasses["INFO"] = 4] = "INFO";
    TextClasses[TextClasses["SUCCESS"] = 5] = "SUCCESS";
    TextClasses[TextClasses["WARNING"] = 6] = "WARNING";
    TextClasses[TextClasses["ERROR"] = 7] = "ERROR";
})(exports.TextClasses || (exports.TextClasses = {}));
var TextClasses = exports.TextClasses;
function textClassToString(clazz) {
    switch (clazz) {
        case TextClasses.NORMAL: return "text-normal";
        case TextClasses.SMALLER: return "text-smaller";
        case TextClasses.SUBTLE: return "text-subtle";
        case TextClasses.HIGHLIGHT: return "text-highlight";
        case TextClasses.INFO: return "text-info";
        case TextClasses.SUCCESS: return "text-success";
        case TextClasses.WARNING: return "text-warning";
        case TextClasses.ERROR: return "text-error";
        default: return "";
    }
}
(function (HighLightClasses) {
    HighLightClasses[HighLightClasses["NONE"] = 0] = "NONE";
    HighLightClasses[HighLightClasses["HIGHLIGHT"] = 1] = "HIGHLIGHT";
    HighLightClasses[HighLightClasses["HIGHLIGHT_INFO"] = 2] = "HIGHLIGHT_INFO";
    HighLightClasses[HighLightClasses["HIGHLIGHT_SUCCESS"] = 3] = "HIGHLIGHT_SUCCESS";
    HighLightClasses[HighLightClasses["HIGHLIGHT_WARNING"] = 4] = "HIGHLIGHT_WARNING";
    HighLightClasses[HighLightClasses["HIGHLIGHT_ERROR"] = 5] = "HIGHLIGHT_ERROR";
})(exports.HighLightClasses || (exports.HighLightClasses = {}));
var HighLightClasses = exports.HighLightClasses;
function highlightToText(clazz) {
    switch (clazz) {
        case HighLightClasses.NONE: return "no-highlight";
        case HighLightClasses.HIGHLIGHT: return "highlight";
        case HighLightClasses.HIGHLIGHT_INFO: return "highlight-info";
        case HighLightClasses.HIGHLIGHT_SUCCESS: return "highlight-success";
        case HighLightClasses.HIGHLIGHT_WARNING: return "highlight-warning";
        case HighLightClasses.HIGHLIGHT_ERROR: return "highlight-error";
        default: return null;
    }
}
(function (LayoutType) {
    LayoutType[LayoutType["BLOCK"] = 0] = "BLOCK";
    LayoutType[LayoutType["INLINE_BLOCK"] = 1] = "INLINE_BLOCK";
    LayoutType[LayoutType["INLINE_BLOCK_TIGHT"] = 2] = "INLINE_BLOCK_TIGHT";
    LayoutType[LayoutType["BTN_GROUP"] = 3] = "BTN_GROUP"; // <div class='btn-group'>Button group</div>
})(exports.LayoutType || (exports.LayoutType = {}));
var LayoutType = exports.LayoutType;
function layoutTypeToString(layoutType) {
    switch (layoutType) {
        case LayoutType.BLOCK: return "block";
        case LayoutType.INLINE_BLOCK: return "inline-block";
        case LayoutType.INLINE_BLOCK_TIGHT: return "inline-block-tight";
        case LayoutType.BTN_GROUP: return "btn-group";
        default: return null;
    }
}
(function (Icon) {
    Icon[Icon["NONE"] = 0] = "NONE";
    Icon[Icon["ALERT"] = 1] = "ALERT";
    Icon[Icon["ALIGNMENT_ALIGN"] = 2] = "ALIGNMENT_ALIGN";
    Icon[Icon["ALIGNMENT_ALIGNED_TO"] = 3] = "ALIGNMENT_ALIGNED_TO";
    Icon[Icon["ALIGNMENT_UNALIGN"] = 4] = "ALIGNMENT_UNALIGN";
    Icon[Icon["ARROW_DOWN"] = 5] = "ARROW_DOWN";
    Icon[Icon["ARROW_LEFT"] = 6] = "ARROW_LEFT";
    Icon[Icon["ARROW_RIGHT"] = 7] = "ARROW_RIGHT";
    Icon[Icon["ARROW_SMALL_DOWN"] = 8] = "ARROW_SMALL_DOWN";
    Icon[Icon["ARROW_SMALL_LEFT"] = 9] = "ARROW_SMALL_LEFT";
    Icon[Icon["ARROW_SMALL_RIGHT"] = 10] = "ARROW_SMALL_RIGHT";
    Icon[Icon["ARROW_SMALL_UP"] = 11] = "ARROW_SMALL_UP";
    Icon[Icon["ARROW_UP"] = 12] = "ARROW_UP";
    Icon[Icon["BEER"] = 13] = "BEER";
    Icon[Icon["BOOK"] = 14] = "BOOK";
    Icon[Icon["BOOKMARK"] = 15] = "BOOKMARK";
    Icon[Icon["BRIEFCASE"] = 16] = "BRIEFCASE";
    Icon[Icon["BROADCAST"] = 17] = "BROADCAST";
    Icon[Icon["BROWSER"] = 18] = "BROWSER";
    Icon[Icon["BUG"] = 19] = "BUG";
    Icon[Icon["CALENDAR"] = 20] = "CALENDAR";
    Icon[Icon["CHECK"] = 21] = "CHECK";
    Icon[Icon["CHECKLIST"] = 22] = "CHECKLIST";
    Icon[Icon["CHEVRON_DOWN"] = 23] = "CHEVRON_DOWN";
    Icon[Icon["CHEVRON_LEFT"] = 24] = "CHEVRON_LEFT";
    Icon[Icon["CHEVRON_RIGHT"] = 25] = "CHEVRON_RIGHT";
    Icon[Icon["CHEVRON_UP"] = 26] = "CHEVRON_UP";
    Icon[Icon["CIRCLE_SLASH"] = 27] = "CIRCLE_SLASH";
    Icon[Icon["CIRCUIT_BOARD"] = 28] = "CIRCUIT_BOARD";
    Icon[Icon["CLIPPY"] = 29] = "CLIPPY";
    Icon[Icon["CLOCK"] = 30] = "CLOCK";
    Icon[Icon["CLOUD_DOWNLOAD"] = 31] = "CLOUD_DOWNLOAD";
    Icon[Icon["CLOUD_UPLOAD"] = 32] = "CLOUD_UPLOAD";
    Icon[Icon["CODE"] = 33] = "CODE";
    Icon[Icon["COLOR_MODE"] = 34] = "COLOR_MODE";
    Icon[Icon["COMMENT_ADD"] = 35] = "COMMENT_ADD";
    Icon[Icon["COMMENT"] = 36] = "COMMENT";
    Icon[Icon["COMMENT_DISCUSSION"] = 37] = "COMMENT_DISCUSSION";
    Icon[Icon["CREDIT_CARD"] = 38] = "CREDIT_CARD";
    Icon[Icon["DASH"] = 39] = "DASH";
    Icon[Icon["DASHBOARD"] = 40] = "DASHBOARD";
    Icon[Icon["DATABASE"] = 41] = "DATABASE";
    Icon[Icon["DEVICE_CAMERA"] = 42] = "DEVICE_CAMERA";
    Icon[Icon["DEVICE_CAMERA_VIDEO"] = 43] = "DEVICE_CAMERA_VIDEO";
    Icon[Icon["DEVICE_DESKTOP"] = 44] = "DEVICE_DESKTOP";
    Icon[Icon["DEVICE_MOBILE"] = 45] = "DEVICE_MOBILE";
    Icon[Icon["DIFF"] = 46] = "DIFF";
    Icon[Icon["DIFF_ADDED"] = 47] = "DIFF_ADDED";
    Icon[Icon["DIFF_IGNORED"] = 48] = "DIFF_IGNORED";
    Icon[Icon["DIFF_MODIFIED"] = 49] = "DIFF_MODIFIED";
    Icon[Icon["DIFF_REMOVED"] = 50] = "DIFF_REMOVED";
    Icon[Icon["DIFF_RENAMED"] = 51] = "DIFF_RENAMED";
    Icon[Icon["ELLIPSIS"] = 52] = "ELLIPSIS";
    Icon[Icon["EYE_UNWATCH"] = 53] = "EYE_UNWATCH";
    Icon[Icon["EYE_WATCH"] = 54] = "EYE_WATCH";
    Icon[Icon["EYE"] = 55] = "EYE";
    Icon[Icon["FILE_BINARY"] = 56] = "FILE_BINARY";
    Icon[Icon["FILE_CODE"] = 57] = "FILE_CODE";
    Icon[Icon["FILE_DIRECTORY"] = 58] = "FILE_DIRECTORY";
    Icon[Icon["FILE_MEDIA"] = 59] = "FILE_MEDIA";
    Icon[Icon["FILE_PDF"] = 60] = "FILE_PDF";
    Icon[Icon["FILE_SUBMODULE"] = 61] = "FILE_SUBMODULE";
    Icon[Icon["FILE_SYMLINK_DIRECTORY"] = 62] = "FILE_SYMLINK_DIRECTORY";
    Icon[Icon["FILE_SYMLINK_FILE"] = 63] = "FILE_SYMLINK_FILE";
    Icon[Icon["FILE_TEXT"] = 64] = "FILE_TEXT";
    Icon[Icon["FILE_ZIP"] = 65] = "FILE_ZIP";
    Icon[Icon["FLAME"] = 66] = "FLAME";
    Icon[Icon["FOLD"] = 67] = "FOLD";
    Icon[Icon["GEAR"] = 68] = "GEAR";
    Icon[Icon["GIFT"] = 69] = "GIFT";
    Icon[Icon["GIST"] = 70] = "GIST";
    Icon[Icon["GIST_SECRET"] = 71] = "GIST_SECRET";
    Icon[Icon["GIT_BRANCH_CREATE"] = 72] = "GIT_BRANCH_CREATE";
    Icon[Icon["GIT_BRANCH_DELETE"] = 73] = "GIT_BRANCH_DELETE";
    Icon[Icon["GIT_BRANCH"] = 74] = "GIT_BRANCH";
    Icon[Icon["GIT_COMMIT"] = 75] = "GIT_COMMIT";
    Icon[Icon["GIT_COMPARE"] = 76] = "GIT_COMPARE";
    Icon[Icon["GIT_MERGE"] = 77] = "GIT_MERGE";
    Icon[Icon["GIT_PULL_REQUEST_ABANDONED"] = 78] = "GIT_PULL_REQUEST_ABANDONED";
    Icon[Icon["GIT_PULL_REQUEST"] = 79] = "GIT_PULL_REQUEST";
    Icon[Icon["GLOBE"] = 80] = "GLOBE";
    Icon[Icon["GRAPH"] = 81] = "GRAPH";
    Icon[Icon["HEART"] = 82] = "HEART";
    Icon[Icon["HISTORY"] = 83] = "HISTORY";
    Icon[Icon["HOME"] = 84] = "HOME";
    Icon[Icon["HORIZONTAL_RULE"] = 85] = "HORIZONTAL_RULE";
    Icon[Icon["HOURGLASS"] = 86] = "HOURGLASS";
    Icon[Icon["HUBOT"] = 87] = "HUBOT";
    Icon[Icon["INBOX"] = 88] = "INBOX";
    Icon[Icon["INFO"] = 89] = "INFO";
    Icon[Icon["ISSUE_CLOSED"] = 90] = "ISSUE_CLOSED";
    Icon[Icon["ISSUE_OPENED"] = 91] = "ISSUE_OPENED";
    Icon[Icon["ISSUE_REOPENED"] = 92] = "ISSUE_REOPENED";
    Icon[Icon["JERSEY"] = 93] = "JERSEY";
    Icon[Icon["JUMP_DOWN"] = 94] = "JUMP_DOWN";
    Icon[Icon["JUMP_LEFT"] = 95] = "JUMP_LEFT";
    Icon[Icon["JUMP_RIGHT"] = 96] = "JUMP_RIGHT";
    Icon[Icon["JUMP_UP"] = 97] = "JUMP_UP";
    Icon[Icon["KEY"] = 98] = "KEY";
    Icon[Icon["KEYBOARD"] = 99] = "KEYBOARD";
    Icon[Icon["LAW"] = 100] = "LAW";
    Icon[Icon["LIGHT_BULB"] = 101] = "LIGHT_BULB";
    Icon[Icon["LINK"] = 102] = "LINK";
    Icon[Icon["LINK_EXTERNAL"] = 103] = "LINK_EXTERNAL";
    Icon[Icon["LIST_ORDERED"] = 104] = "LIST_ORDERED";
    Icon[Icon["LIST_UNORDERED"] = 105] = "LIST_UNORDERED";
    Icon[Icon["LOCATION"] = 106] = "LOCATION";
    Icon[Icon["GIST_PRIVATE"] = 107] = "GIST_PRIVATE";
    Icon[Icon["MIRROR_PRIVATE"] = 108] = "MIRROR_PRIVATE";
    Icon[Icon["GIT_FORK_PRIVATE"] = 109] = "GIT_FORK_PRIVATE";
    Icon[Icon["LOCK"] = 110] = "LOCK";
    Icon[Icon["LOGO_GITHUB"] = 111] = "LOGO_GITHUB";
    Icon[Icon["MAIL"] = 112] = "MAIL";
    Icon[Icon["MAIL_READ"] = 113] = "MAIL_READ";
    Icon[Icon["MAIL_REPLY"] = 114] = "MAIL_REPLY";
    Icon[Icon["MARK_GITHUB"] = 115] = "MARK_GITHUB";
    Icon[Icon["MARKDOWN"] = 116] = "MARKDOWN";
    Icon[Icon["MEGAPHONE"] = 117] = "MEGAPHONE";
    Icon[Icon["MENTION"] = 118] = "MENTION";
    Icon[Icon["MICROSCOPE"] = 119] = "MICROSCOPE";
    Icon[Icon["MILESTONE"] = 120] = "MILESTONE";
    Icon[Icon["MIRROR_PUBLIC"] = 121] = "MIRROR_PUBLIC";
    Icon[Icon["MIRROR"] = 122] = "MIRROR";
    Icon[Icon["MORTAR_BOARD"] = 123] = "MORTAR_BOARD";
    Icon[Icon["MOVE_DOWN"] = 124] = "MOVE_DOWN";
    Icon[Icon["MOVE_LEFT"] = 125] = "MOVE_LEFT";
    Icon[Icon["MOVE_RIGHT"] = 126] = "MOVE_RIGHT";
    Icon[Icon["MOVE_UP"] = 127] = "MOVE_UP";
    Icon[Icon["MUTE"] = 128] = "MUTE";
    Icon[Icon["NO_NEWLINE"] = 129] = "NO_NEWLINE";
    Icon[Icon["OCTOFACE"] = 130] = "OCTOFACE";
    Icon[Icon["ORGANIZATION"] = 131] = "ORGANIZATION";
    Icon[Icon["PACKAGE"] = 132] = "PACKAGE";
    Icon[Icon["PAINTCAN"] = 133] = "PAINTCAN";
    Icon[Icon["PENCIL"] = 134] = "PENCIL";
    Icon[Icon["PERSON_ADD"] = 135] = "PERSON_ADD";
    Icon[Icon["PERSON_FOLLOW"] = 136] = "PERSON_FOLLOW";
    Icon[Icon["PERSON"] = 137] = "PERSON";
    Icon[Icon["PIN"] = 138] = "PIN";
    Icon[Icon["PLAYBACK_FAST_FORWARD"] = 139] = "PLAYBACK_FAST_FORWARD";
    Icon[Icon["PLAYBACK_PAUSE"] = 140] = "PLAYBACK_PAUSE";
    Icon[Icon["PLAYBACK_PLAY"] = 141] = "PLAYBACK_PLAY";
    Icon[Icon["PLAYBACK_REWIND"] = 142] = "PLAYBACK_REWIND";
    Icon[Icon["PLUG"] = 143] = "PLUG";
    Icon[Icon["REPO_CREATE"] = 144] = "REPO_CREATE";
    Icon[Icon["GIST_NEW"] = 145] = "GIST_NEW";
    Icon[Icon["FILE_DIRECTORY_CREATE"] = 146] = "FILE_DIRECTORY_CREATE";
    Icon[Icon["FILE_ADD"] = 147] = "FILE_ADD";
    Icon[Icon["PLUS"] = 148] = "PLUS";
    Icon[Icon["PODIUM"] = 149] = "PODIUM";
    Icon[Icon["PRIMITIVE_DOT"] = 150] = "PRIMITIVE_DOT";
    Icon[Icon["PRIMITIVE_SQUARE"] = 151] = "PRIMITIVE_SQUARE";
    Icon[Icon["PULSE"] = 152] = "PULSE";
    Icon[Icon["PUZZLE"] = 153] = "PUZZLE";
    Icon[Icon["QUESTION"] = 154] = "QUESTION";
    Icon[Icon["QUOTE"] = 155] = "QUOTE";
    Icon[Icon["RADIO_TOWER"] = 156] = "RADIO_TOWER";
    Icon[Icon["REPO_DELETE"] = 157] = "REPO_DELETE";
    Icon[Icon["REPO"] = 158] = "REPO";
    Icon[Icon["REPO_CLONE"] = 159] = "REPO_CLONE";
    Icon[Icon["REPO_FORCE_PUSH"] = 160] = "REPO_FORCE_PUSH";
    Icon[Icon["GIST_FORK"] = 161] = "GIST_FORK";
    Icon[Icon["REPO_FORKED"] = 162] = "REPO_FORKED";
    Icon[Icon["REPO_PULL"] = 163] = "REPO_PULL";
    Icon[Icon["REPO_PUSH"] = 164] = "REPO_PUSH";
    Icon[Icon["ROCKET"] = 165] = "ROCKET";
    Icon[Icon["RSS"] = 166] = "RSS";
    Icon[Icon["RUBY"] = 167] = "RUBY";
    Icon[Icon["SCREEN_FULL"] = 168] = "SCREEN_FULL";
    Icon[Icon["SCREEN_NORMAL"] = 169] = "SCREEN_NORMAL";
    Icon[Icon["SEARCH_SAVE"] = 170] = "SEARCH_SAVE";
    Icon[Icon["SEARCH"] = 171] = "SEARCH";
    Icon[Icon["SERVER"] = 172] = "SERVER";
    Icon[Icon["SETTINGS"] = 173] = "SETTINGS";
    Icon[Icon["LOG_IN"] = 174] = "LOG_IN";
    Icon[Icon["SIGN_IN"] = 175] = "SIGN_IN";
    Icon[Icon["LOG_OUT"] = 176] = "LOG_OUT";
    Icon[Icon["SIGN_OUT"] = 177] = "SIGN_OUT";
    Icon[Icon["SPLIT"] = 178] = "SPLIT";
    Icon[Icon["SQUIRREL"] = 179] = "SQUIRREL";
    Icon[Icon["STAR_ADD"] = 180] = "STAR_ADD";
    Icon[Icon["STAR_DELETE"] = 181] = "STAR_DELETE";
    Icon[Icon["STAR"] = 182] = "STAR";
    Icon[Icon["STEPS"] = 183] = "STEPS";
    Icon[Icon["STOP"] = 184] = "STOP";
    Icon[Icon["REPO_SYNC"] = 185] = "REPO_SYNC";
    Icon[Icon["SYNC"] = 186] = "SYNC";
    Icon[Icon["TAG_REMOVE"] = 187] = "TAG_REMOVE";
    Icon[Icon["TAG_ADD"] = 188] = "TAG_ADD";
    Icon[Icon["TAG"] = 189] = "TAG";
    Icon[Icon["TELESCOPE"] = 190] = "TELESCOPE";
    Icon[Icon["TERMINAL"] = 191] = "TERMINAL";
    Icon[Icon["THREE_BARS"] = 192] = "THREE_BARS";
    Icon[Icon["THUMBSDOWN"] = 193] = "THUMBSDOWN";
    Icon[Icon["THUMBSUP"] = 194] = "THUMBSUP";
    Icon[Icon["TOOLS"] = 195] = "TOOLS";
    Icon[Icon["TRASHCAN"] = 196] = "TRASHCAN";
    Icon[Icon["TRIANGLE_DOWN"] = 197] = "TRIANGLE_DOWN";
    Icon[Icon["TRIANGLE_LEFT"] = 198] = "TRIANGLE_LEFT";
    Icon[Icon["TRIANGLE_RIGHT"] = 199] = "TRIANGLE_RIGHT";
    Icon[Icon["TRIANGLE_UP"] = 200] = "TRIANGLE_UP";
    Icon[Icon["UNFOLD"] = 201] = "UNFOLD";
    Icon[Icon["UNMUTE"] = 202] = "UNMUTE";
    Icon[Icon["VERSIONS"] = 203] = "VERSIONS";
    Icon[Icon["REMOVE_CLOSE"] = 204] = "REMOVE_CLOSE";
    Icon[Icon["X"] = 205] = "X";
    Icon[Icon["ZAP"] = 206] = "ZAP";
})(exports.Icon || (exports.Icon = {}));
var Icon = exports.Icon;
function iconToClass(icon) {
    switch (icon) {
        case Icon.ALERT: return 'icon-alert';
        case Icon.ALIGNMENT_ALIGN: return 'icon-alignment-align';
        case Icon.ALIGNMENT_ALIGNED_TO: return 'icon-alignment-aligned-to';
        case Icon.ALIGNMENT_UNALIGN: return 'icon-alignment-unalign';
        case Icon.ARROW_DOWN: return 'icon-arrow-down';
        case Icon.ARROW_LEFT: return 'icon-arrow-left';
        case Icon.ARROW_RIGHT: return 'icon-arrow-right';
        case Icon.ARROW_SMALL_DOWN: return 'icon-arrow-small-down';
        case Icon.ARROW_SMALL_LEFT: return 'icon-arrow-small-left';
        case Icon.ARROW_SMALL_RIGHT: return 'icon-arrow-small-right';
        case Icon.ARROW_SMALL_UP: return 'icon-arrow-small-up';
        case Icon.ARROW_UP: return 'icon-arrow-up';
        case Icon.BEER: return 'icon-beer';
        case Icon.BOOK: return 'icon-book';
        case Icon.BOOKMARK: return 'icon-bookmark';
        case Icon.BRIEFCASE: return 'icon-briefcase';
        case Icon.BROADCAST: return 'icon-broadcast';
        case Icon.BROWSER: return 'icon-browser';
        case Icon.BUG: return 'icon-bug';
        case Icon.CALENDAR: return 'icon-calendar';
        case Icon.CHECK: return 'icon-check';
        case Icon.CHECKLIST: return 'icon-checklist';
        case Icon.CHEVRON_DOWN: return 'icon-chevron-down';
        case Icon.CHEVRON_LEFT: return 'icon-chevron-left';
        case Icon.CHEVRON_RIGHT: return 'icon-chevron-right';
        case Icon.CHEVRON_UP: return 'icon-chevron-up';
        case Icon.CIRCLE_SLASH: return 'icon-circle-slash';
        case Icon.CIRCUIT_BOARD: return 'icon-circuit-board';
        case Icon.CLIPPY: return 'icon-clippy';
        case Icon.CLOCK: return 'icon-clock';
        case Icon.CLOUD_DOWNLOAD: return 'icon-cloud-download';
        case Icon.CLOUD_UPLOAD: return 'icon-cloud-upload';
        case Icon.CODE: return 'icon-code';
        case Icon.COLOR_MODE: return 'icon-color-mode';
        case Icon.COMMENT_ADD: return 'icon-comment-add';
        case Icon.COMMENT: return 'icon-comment';
        case Icon.COMMENT_DISCUSSION: return 'icon-comment-discussion';
        case Icon.CREDIT_CARD: return 'icon-credit-card';
        case Icon.DASH: return 'icon-dash';
        case Icon.DASHBOARD: return 'icon-dashboard';
        case Icon.DATABASE: return 'icon-database';
        case Icon.DEVICE_CAMERA: return 'icon-device-camera';
        case Icon.DEVICE_CAMERA_VIDEO: return 'icon-device-camera-video';
        case Icon.DEVICE_DESKTOP: return 'icon-device-desktop';
        case Icon.DEVICE_MOBILE: return 'icon-device-mobile';
        case Icon.DIFF: return 'icon-diff';
        case Icon.DIFF_ADDED: return 'icon-diff-added';
        case Icon.DIFF_IGNORED: return 'icon-diff-ignored';
        case Icon.DIFF_MODIFIED: return 'icon-diff-modified';
        case Icon.DIFF_REMOVED: return 'icon-diff-removed';
        case Icon.DIFF_RENAMED: return 'icon-diff-renamed';
        case Icon.ELLIPSIS: return 'icon-ellipsis';
        case Icon.EYE_UNWATCH: return 'icon-eye-unwatch';
        case Icon.EYE_WATCH: return 'icon-eye-watch';
        case Icon.EYE: return 'icon-eye';
        case Icon.FILE_BINARY: return 'icon-file-binary';
        case Icon.FILE_CODE: return 'icon-file-code';
        case Icon.FILE_DIRECTORY: return 'icon-file-directory';
        case Icon.FILE_MEDIA: return 'icon-file-media';
        case Icon.FILE_PDF: return 'icon-file-pdf';
        case Icon.FILE_SUBMODULE: return 'icon-file-submodule';
        case Icon.FILE_SYMLINK_DIRECTORY: return 'icon-file-symlink-directory';
        case Icon.FILE_SYMLINK_FILE: return 'icon-file-symlink-file';
        case Icon.FILE_TEXT: return 'icon-file-text';
        case Icon.FILE_ZIP: return 'icon-file-zip';
        case Icon.FLAME: return 'icon-flame';
        case Icon.FOLD: return 'icon-fold';
        case Icon.GEAR: return 'icon-gear';
        case Icon.GIFT: return 'icon-gift';
        case Icon.GIST: return 'icon-gist';
        case Icon.GIST_SECRET: return 'icon-gist-secret';
        case Icon.GIT_BRANCH_CREATE: return 'icon-git-branch-create';
        case Icon.GIT_BRANCH_DELETE: return 'icon-git-branch-delete';
        case Icon.GIT_BRANCH: return 'icon-git-branch';
        case Icon.GIT_COMMIT: return 'icon-git-commit';
        case Icon.GIT_COMPARE: return 'icon-git-compare';
        case Icon.GIT_MERGE: return 'icon-git-merge';
        case Icon.GIT_PULL_REQUEST_ABANDONED: return 'icon-git-pull-request-abandoned';
        case Icon.GIT_PULL_REQUEST: return 'icon-git-pull-request';
        case Icon.GLOBE: return 'icon-globe';
        case Icon.GRAPH: return 'icon-graph';
        case Icon.HEART: return 'icon-heart';
        case Icon.HISTORY: return 'icon-history';
        case Icon.HOME: return 'icon-home';
        case Icon.HORIZONTAL_RULE: return 'icon-horizontal-rule';
        case Icon.HOURGLASS: return 'icon-hourglass';
        case Icon.HUBOT: return 'icon-hubot';
        case Icon.INBOX: return 'icon-inbox';
        case Icon.INFO: return 'icon-info';
        case Icon.ISSUE_CLOSED: return 'icon-issue-closed';
        case Icon.ISSUE_OPENED: return 'icon-issue-opened';
        case Icon.ISSUE_REOPENED: return 'icon-issue-reopened';
        case Icon.JERSEY: return 'icon-jersey';
        case Icon.JUMP_DOWN: return 'icon-jump-down';
        case Icon.JUMP_LEFT: return 'icon-jump-left';
        case Icon.JUMP_RIGHT: return 'icon-jump-right';
        case Icon.JUMP_UP: return 'icon-jump-up';
        case Icon.KEY: return 'icon-key';
        case Icon.KEYBOARD: return 'icon-keyboard';
        case Icon.LAW: return 'icon-law';
        case Icon.LIGHT_BULB: return 'icon-light-bulb';
        case Icon.LINK: return 'icon-link';
        case Icon.LINK_EXTERNAL: return 'icon-link-external';
        case Icon.LIST_ORDERED: return 'icon-list-ordered';
        case Icon.LIST_UNORDERED: return 'icon-list-unordered';
        case Icon.LOCATION: return 'icon-location';
        case Icon.GIST_PRIVATE: return 'icon-gist-private';
        case Icon.MIRROR_PRIVATE: return 'icon-mirror-private';
        case Icon.GIT_FORK_PRIVATE: return 'icon-git-fork-private';
        case Icon.LOCK: return 'icon-lock';
        case Icon.LOGO_GITHUB: return 'icon-logo-github';
        case Icon.MAIL: return 'icon-mail';
        case Icon.MAIL_READ: return 'icon-mail-read';
        case Icon.MAIL_REPLY: return 'icon-mail-reply';
        case Icon.MARK_GITHUB: return 'icon-mark-github';
        case Icon.MARKDOWN: return 'icon-markdown';
        case Icon.MEGAPHONE: return 'icon-megaphone';
        case Icon.MENTION: return 'icon-mention';
        case Icon.MICROSCOPE: return 'icon-microscope';
        case Icon.MILESTONE: return 'icon-milestone';
        case Icon.MIRROR_PUBLIC: return 'icon-mirror-public';
        case Icon.MIRROR: return 'icon-mirror';
        case Icon.MORTAR_BOARD: return 'icon-mortar-board';
        case Icon.MOVE_DOWN: return 'icon-move-down';
        case Icon.MOVE_LEFT: return 'icon-move-left';
        case Icon.MOVE_RIGHT: return 'icon-move-right';
        case Icon.MOVE_UP: return 'icon-move-up';
        case Icon.MUTE: return 'icon-mute';
        case Icon.NO_NEWLINE: return 'icon-no-newline';
        case Icon.OCTOFACE: return 'icon-octoface';
        case Icon.ORGANIZATION: return 'icon-organization';
        case Icon.PACKAGE: return 'icon-package';
        case Icon.PAINTCAN: return 'icon-paintcan';
        case Icon.PENCIL: return 'icon-pencil';
        case Icon.PERSON_ADD: return 'icon-person-add';
        case Icon.PERSON_FOLLOW: return 'icon-person-follow';
        case Icon.PERSON: return 'icon-person';
        case Icon.PIN: return 'icon-pin';
        case Icon.PLAYBACK_FAST_FORWARD: return 'icon-playback-fast-forward';
        case Icon.PLAYBACK_PAUSE: return 'icon-playback-pause';
        case Icon.PLAYBACK_PLAY: return 'icon-playback-play';
        case Icon.PLAYBACK_REWIND: return 'icon-playback-rewind';
        case Icon.PLUG: return 'icon-plug';
        case Icon.REPO_CREATE: return 'icon-repo-create';
        case Icon.GIST_NEW: return 'icon-gist-new';
        case Icon.FILE_DIRECTORY_CREATE: return 'icon-file-directory-create';
        case Icon.FILE_ADD: return 'icon-file-add';
        case Icon.PLUS: return 'icon-plus';
        case Icon.PODIUM: return 'icon-podium';
        case Icon.PRIMITIVE_DOT: return 'icon-primitive-dot';
        case Icon.PRIMITIVE_SQUARE: return 'icon-primitive-square';
        case Icon.PULSE: return 'icon-pulse';
        case Icon.PUZZLE: return 'icon-puzzle';
        case Icon.QUESTION: return 'icon-question';
        case Icon.QUOTE: return 'icon-quote';
        case Icon.RADIO_TOWER: return 'icon-radio-tower';
        case Icon.REPO_DELETE: return 'icon-repo-delete';
        case Icon.REPO: return 'icon-repo';
        case Icon.REPO_CLONE: return 'icon-repo-clone';
        case Icon.REPO_FORCE_PUSH: return 'icon-repo-force-push';
        case Icon.GIST_FORK: return 'icon-gist-fork';
        case Icon.REPO_FORKED: return 'icon-repo-forked';
        case Icon.REPO_PULL: return 'icon-repo-pull';
        case Icon.REPO_PUSH: return 'icon-repo-push';
        case Icon.ROCKET: return 'icon-rocket';
        case Icon.RSS: return 'icon-rss';
        case Icon.RUBY: return 'icon-ruby';
        case Icon.SCREEN_FULL: return 'icon-screen-full';
        case Icon.SCREEN_NORMAL: return 'icon-screen-normal';
        case Icon.SEARCH_SAVE: return 'icon-search-save';
        case Icon.SEARCH: return 'icon-search';
        case Icon.SERVER: return 'icon-server';
        case Icon.SETTINGS: return 'icon-settings';
        case Icon.LOG_IN: return 'icon-log-in';
        case Icon.SIGN_IN: return 'icon-sign-in';
        case Icon.LOG_OUT: return 'icon-log-out';
        case Icon.SIGN_OUT: return 'icon-sign-out';
        case Icon.SPLIT: return 'icon-split';
        case Icon.SQUIRREL: return 'icon-squirrel';
        case Icon.STAR_ADD: return 'icon-star-add';
        case Icon.STAR_DELETE: return 'icon-star-delete';
        case Icon.STAR: return 'icon-star';
        case Icon.STEPS: return 'icon-steps';
        case Icon.STOP: return 'icon-stop';
        case Icon.REPO_SYNC: return 'icon-repo-sync';
        case Icon.SYNC: return 'icon-sync';
        case Icon.TAG_REMOVE: return 'icon-tag-remove';
        case Icon.TAG_ADD: return 'icon-tag-add';
        case Icon.TAG: return 'icon-tag';
        case Icon.TELESCOPE: return 'icon-telescope';
        case Icon.TERMINAL: return 'icon-terminal';
        case Icon.THREE_BARS: return 'icon-three-bars';
        case Icon.THUMBSDOWN: return 'icon-thumbsdown';
        case Icon.THUMBSUP: return 'icon-thumbsup';
        case Icon.TOOLS: return 'icon-tools';
        case Icon.TRASHCAN: return 'icon-trashcan';
        case Icon.TRIANGLE_DOWN: return 'icon-triangle-down';
        case Icon.TRIANGLE_LEFT: return 'icon-triangle-left';
        case Icon.TRIANGLE_RIGHT: return 'icon-triangle-right';
        case Icon.TRIANGLE_UP: return 'icon-triangle-up';
        case Icon.UNFOLD: return 'icon-unfold';
        case Icon.UNMUTE: return 'icon-unmute';
        case Icon.VERSIONS: return 'icon-versions';
        case Icon.REMOVE_CLOSE: return 'icon-remove-close';
        case Icon.X: return 'icon-x';
        case Icon.ZAP: return 'icon-zap';
        default: throw new Error("Should never happen");
    }
}
exports.iconToClass = iconToClass;
var Button = (function (_super) {
    __extends(Button, _super);
    function Button(content, _size, _highlight, _icon, onClick) {
        if (_size === void 0) { _size = ButtonSizes.NORMAL; }
        if (_highlight === void 0) { _highlight = ButtonHighlights.NO_HIGHLIGHT; }
        if (_icon === void 0) { _icon = null; }
        if (onClick === void 0) { onClick = null; }
        _super.call(this, "button", _icon);
        this._size = _size;
        this._highlight = _highlight;
        this._text = "";
        if (onClick) {
            this.addOnClickListener(onClick);
        }
        this._text = content;
    }
    Button.sizeString = function (buttonSize) {
        switch (buttonSize) {
            case ButtonSizes.NORMAL: return "normal";
            case ButtonSizes.EXTRA_SMALL: return "btn-xs";
            case ButtonSizes.SMALL: return "btn-sm";
            case ButtonSizes.LARGE: return "btn-lg";
            default: return null;
        }
    };
    Button.highlightString = function (highlight) {
        switch (highlight) {
            case ButtonHighlights.NO_HIGHLIGHT: return "no";
            case ButtonHighlights.PRIMARY: return "btn-primary";
            case ButtonHighlights.INFO: return "btn-info";
            case ButtonHighlights.WARNING: return "btn-warning";
            case ButtonHighlights.ERROR: return "btn-error";
            case ButtonHighlights.SUCCESS: return "btn-success";
            default: return null;
        }
    };
    Button.prototype.getText = function () {
        return this._text;
    };
    Button.prototype.setText = function (value) {
        this._text = value;
        this._ui.value = value;
        //this.handleLocalChange();
    };
    Button.prototype.handleDataChanged = function () {
        this.setText(this.getBinding().get());
        _super.prototype.handleDataChanged.call(this);
    };
    Button.prototype.customize = function (element) {
        _super.prototype.customize.call(this, element);
        element.textContent = this._text;
        var h = Button.highlightString(this._highlight);
        if (this._oldHighlightClass) {
            element.classList.remove(this._oldHighlightClass);
        }
        this._oldHighlightClass = h;
        element.classList.add(h);
        if (this._oldSizeClass) {
            element.classList.remove(this._oldSizeClass);
        }
        var s = Button.sizeString(this._size);
        this._oldSizeClass = s;
        element.classList.add(s);
        element.classList.add("btn");
    };
    return Button;
}(BasicComponent));
exports.Button = Button;
var ToggleButton = (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(content, size, highlight, icon, onClick) {
        _super.call(this, content, size, highlight, icon, function (e) { e.toggle(); onClick(e); });
        this._selected = false;
        this._defaultHighlight = highlight;
    }
    ToggleButton.prototype.getSelected = function () {
        return this._selected;
    };
    ToggleButton.prototype.handleDataChanged = function () {
        this.setSelected(this.getBinding().get());
        _super.prototype.handleDataChanged.call(this);
    };
    ToggleButton.prototype.setSelected = function (selected) {
        this._selected = selected;
        this._highlight = selected ? ButtonHighlights.INFO : this._defaultHighlight;
        this.handleLocalChange();
        return this;
    };
    ToggleButton.prototype.toggle = function () {
        this.setSelected(!this._selected);
    };
    return ToggleButton;
}(Button));
exports.ToggleButton = ToggleButton;
var SimpleRenderer = (function () {
    function SimpleRenderer(_renderFunc) {
        this._renderFunc = _renderFunc;
    }
    SimpleRenderer.prototype.render = function (model) {
        return this._renderFunc(model);
    };
    return SimpleRenderer;
}());
exports.SimpleRenderer = SimpleRenderer;
var PropertyChangeEvent = (function () {
    function PropertyChangeEvent(source, value, property) {
        if (value === void 0) { value = null; }
        if (property === void 0) { property = null; }
        this.source = source;
        this.value = value;
        this.property = property;
    }
    return PropertyChangeEvent;
}());
exports.PropertyChangeEvent = PropertyChangeEvent;
/*
 * Viewer is an unordered list with a model. It doesn't actually show anything.
 */
var Viewer = (function (_super) {
    __extends(Viewer, _super);
    function Viewer() {
        _super.apply(this, arguments);
        this._contentui = new BasicComponent("ul");
        this._children = [this._contentui];
    }
    Viewer.prototype.getInput = function () {
        return this._model;
    };
    Viewer.prototype.setInput = function (value, refresh) {
        if (refresh === void 0) { refresh = true; }
        this._model = value;
        try {
            this.smartUpdateContent();
        }
        catch (e) {
            console.log("Error at setInput: ", e);
        }
    };
    Viewer.prototype.updateContent = function () { this.refresh(); };
    Viewer.prototype.smartUpdateContent = function () { this.refresh(); };
    return Viewer;
}(BasicComponent));
exports.Viewer = Viewer;
var StructuredViewer = (function (_super) {
    __extends(StructuredViewer, _super);
    function StructuredViewer(_cp, renderer) {
        var _this = this;
        _super.call(this, "div", null);
        this._cp = _cp;
        this.renderer = renderer;
        this.selectionListeners = [];
        this.viewerFilters = [];
        this.lst = function (e) {
            _this.refresh();
        };
        this.currentSelection = [];
        this.currentSelectionIds = [];
        this.eh = function (x) {
            _this.updateContent();
            //x.property._ui.refresh();        
        };
        _cp.init(this);
        if (this.renderer instanceof BasicListanable) {
            renderer.addListener(this.eh);
        }
    }
    StructuredViewer.prototype.setBasicLabelFunction = function (f) {
        this.basicLabelProvider = f;
    };
    StructuredViewer.prototype.getBasicLabelFunction = function () {
        return this.basicLabelProvider;
    };
    StructuredViewer.prototype.setKeyProvider = function (kp) {
        this._keyProvider = kp;
    };
    StructuredViewer.prototype.getKeyProvider = function () {
        return this._keyProvider;
    };
    StructuredViewer.prototype.nodeKey = function (node) {
        if (this._keyProvider) {
            return this._keyProvider.key(node);
        }
        if (!node) {
            return "";
        }
        if (node['id']) {
            if (typeof node['id'] == 'function') {
                return node['id']();
            }
        }
        return node;
    };
    StructuredViewer.prototype.addViewerFilter = function (filter) {
        this.viewerFilters.push(filter);
        filter.addListener(this.lst);
        this.refresh();
    };
    StructuredViewer.prototype.removeViewerFilter = function (filter) {
        this.viewerFilters = this.viewerFilters.filter(function (x) { return x != filter; });
        filter.removeListener(this.lst);
        this.refresh();
    };
    StructuredViewer.prototype.getViewerFilters = function () {
        return [].concat(this.viewerFilters);
    };
    StructuredViewer.prototype.setViewerSorder = function (sorter) {
        this.viewerSorter = sorter;
        this.refresh();
    };
    StructuredViewer.prototype.getViewerSorter = function () {
        return this.viewerSorter;
    };
    StructuredViewer.prototype.addSelectionListener = function (l) {
        this.selectionListeners.push(l);
    };
    StructuredViewer.prototype.removeSelectionListener = function (l) {
        this.selectionListeners = this.selectionListeners.filter(function (x) { return x != l; });
    };
    StructuredViewer.prototype.setSelectionInternal = function (newValue) {
        var _this = this;
        if (this.currentSelection != newValue) {
            var oldS = new StructuredSelection(this.currentSelection);
            var newS = new StructuredSelection(newValue);
            var event = new SelectionChangedEvent(this, oldS, newS);
            this.selectionListeners.forEach(function (x) { return x.selectionChanged(event); });
            this.currentSelection = newValue;
            this.currentSelectionIds = newValue.map(function (x) { return _this.nodeKey(x); });
        }
    };
    StructuredViewer.prototype.getSelection = function () {
        return new StructuredSelection([].concat(this.currentSelection));
    };
    StructuredViewer.prototype.getRenderedContent = function (p) {
        var _this = this;
        var unfilteredContent = this.unfilteredContent(p);
        if (unfilteredContent) {
            if (Array.isArray(unfilteredContent)) {
                var elements = unfilteredContent;
                this.viewerFilters.forEach(function (x) {
                    elements = elements.filter(function (el) { return x.accept(_this, el, p); });
                });
                if (this.viewerSorter) {
                    elements = _.sortBy(elements, function (el) { return _this.viewerSorter.order(_this, el, p); });
                }
                return elements;
            }
        }
        return unfilteredContent;
    };
    StructuredViewer.prototype.unfilteredContent = function (p) {
        return this._cp.elements(this.getInput());
    };
    StructuredViewer.prototype.processChildren = function (model, view) { return null; };
    StructuredViewer.prototype.dispose = function () {
        if (this.renderer instanceof BasicListanable) {
            renderer.removeListener(this.eh);
        }
        _super.prototype.dispose.call(this);
        this._cp.dispose();
    };
    return StructuredViewer;
}(Viewer));
exports.StructuredViewer = StructuredViewer;
var ArrayContentProvider = (function () {
    function ArrayContentProvider() {
    }
    ArrayContentProvider.prototype.elements = function (model) {
        return model;
    };
    ArrayContentProvider.prototype.init = function (viewer) {
    };
    ArrayContentProvider.prototype.dispose = function () {
    };
    return ArrayContentProvider;
}());
exports.ArrayContentProvider = ArrayContentProvider;
var StructuredSelection = (function () {
    function StructuredSelection(elements) {
        this.elements = [];
        if (Array.isArray(elements)) {
            this.elements = elements;
        }
        else {
            this.elements = [elements];
        }
    }
    StructuredSelection.prototype.isEmpty = function () {
        return this.elements.length == 0;
    };
    return StructuredSelection;
}());
exports.StructuredSelection = StructuredSelection;
var SelectionChangedEvent = (function () {
    function SelectionChangedEvent(source, oldSelection, selection) {
        this.source = source;
        this.oldSelection = oldSelection;
        this.selection = selection;
    }
    return SelectionChangedEvent;
}());
exports.SelectionChangedEvent = SelectionChangedEvent;
var LabelRenderer = (function () {
    function LabelRenderer(_label, ic) {
        if (ic === void 0) { ic = null; }
        this._label = _label;
        this.ic = ic;
    }
    LabelRenderer.prototype.render = function (model) {
        var label = new Label(this._label(model), this.ic ? this.ic(model) : null);
        return label;
    };
    return LabelRenderer;
}());
exports.LabelRenderer = LabelRenderer;
var ListView = (function (_super) {
    __extends(ListView, _super);
    function ListView() {
        _super.apply(this, arguments);
        this._panelCustomized = false;
        this._scrollTo = 0;
        this.multipleSelect = false;
        this.selectedComponents = [];
    }
    ListView.prototype.getTreeModel = function () {
        if (!this.treeModel)
            this.treeModel = new tm.TreeModel(this._contentui);
        return this.treeModel;
    };
    ListView.prototype.setBasicLabelFunction = function (f) {
        this.basicLabelProvider = f;
    };
    ListView.prototype.clear = function () {
        var model = this.getTreeModel();
        var root = model.get(null);
        root.container.children().forEach(function (child) { return root.container.removeChild(child); });
        this._selected = null;
        this.selectedComponents = [];
        this.getTreeModel().clear();
    };
    ListView.prototype.put = function (element, parent, after, neighbour) {
        if (after === void 0) { after = false; }
        var pNode = this.treeModel.get(parent);
        var nNode = this.treeModel.get(neighbour, pNode);
        var nView = nNode ? nNode.view : null;
        this.getTreeModel().insert(element, pNode, nNode, after);
        var preview = this.renderer.render(element), view = this.wrapChild(element, preview);
        if (after == true && neighbour == null) {
            after = false;
            nView = pNode.container.children()[0];
        }
        pNode.container.addChild(view, nView, after);
    };
    ListView.prototype.insertBefore = function (element, parent, before) {
        return this.put(element, parent, false, before);
    };
    ListView.prototype.insertAfter = function (element, parent, after) {
        return this.put(element, parent, true, after);
    };
    ListView.prototype.remove = function (element) {
        var node = this.treeModel.get(element);
        if (!node)
            return;
        this.unselectItem(node.view);
        node.parent.container.removeChild(node.view);
        this.treeModel.remove(node);
    };
    ListView.prototype.setComparator = function (cmp) {
        this._cmp = cmp;
    };
    ListView.prototype.getComparator = function () {
        if (this._cmp)
            return this._cmp;
        return function (x, y) { return x.hashkey != null && x.__hashkey__ == y.__hashkey__; };
    };
    ListView.prototype.propagateHashKey = function (parent, element) {
        if (element['__hashkey__'])
            return;
        if (typeof element['hashkey'] == "function")
            element['__hashkey__'] = element['hashkey']();
        else if (this.getBasicLabelFunction()) {
            var param = this.getBasicLabelFunction()(element);
            element['__hashkey__'] = parent ? parent['__hashkey__'] + "::" + param : param;
        }
    };
    ListView.prototype.smartUpdateContent = function (model) {
        var _this = this;
        if (model === void 0) { model = null; }
        var pelements = this.getRenderedContent(model);
        if (!pelements || !Array.isArray(pelements))
            return;
        this.customizePanel();
        var elements = pelements, oldElements = this.getTreeModel().get(model).children.map(function (x) { return x.data; });
        elements.forEach(function (e) { return _this.propagateHashKey(model, e); });
        var differences = diff.diff(elements, oldElements, this.getComparator());
        var after = null;
        differences.forEach(function (diff) {
            switch (diff.type) {
                case '+':
                    _this.insertAfter(diff.element, model, after);
                    after = diff.element;
                    break;
                case '-':
                    _this.remove(diff.element);
                    break;
                case '=':
                    _this.treeModel.patch(oldElements[diff.bi], after = elements[diff.ai]);
                    _this.smartUpdateContent(after);
                    break;
                default:
                    throw "That should not ever happen. (DIFF_CORRUPTED_SMART_UPDATE_CONTENT)";
            }
        });
    };
    ListView.prototype.customizePanel = function (forced) {
        var _this = this;
        if (forced === void 0) { forced = false; }
        if (!forced && this._panelCustomized === true)
            return;
        this._panelCustomized = true;
        var cpane = this._contentui.ui();
        cpane.onkeydown = function (e) { return _this.handleKey(e); };
        cpane.classList.add("focusable-panel");
        cpane.classList.add("list-group");
        cpane.tabIndex = -1;
    };
    ListView.prototype.tryScrollToSelected = function () {
        try {
            var p = this.parent();
        }
        catch (e) {
        }
    };
    ListView.prototype.handleKey = function (e) {
        if (e.keyCode == 40) {
            this.navigateDown();
        }
        if (e.keyCode == 38) {
            this.navigateUp();
        }
    };
    ListView.prototype.navigateDown = function () {
        // var index = this._components.indexOf(this._selected)
        // if (index == -1) return;
        // if (index < this._components.length - 1) {
        //     this.setSelection(this._components[index + 1].getBinding().get())
        //     this.focusPane();
        // }
    };
    ListView.prototype.navigateUp = function () {
        // var index = this._components.indexOf(this._selected)
        // if (index > 0) {
        //     this.setSelection(this._components[index - 1].getBinding().get())
        //     this.focusPane()
        // }
    };
    ListView.prototype.focusPane = function () {
        this._contentui.ui().focus();
    };
    ListView.prototype.wrapChild = function (element, preview) {
        var _this = this;
        var view = new BasicComponent("li");
        view.setBinding(new BasicBinding(element));
        view.addChild(preview);
        view.addOnClickListener(function (x) {
            _this.selectItem(x);
        });
        if (_.find(this.currentSelectionIds, function (x) { return x == _this.nodeKey(element); })) {
            view.addClass("selected");
            this._selected = view;
        }
        this.getTreeModel().registerViews(element, view, null);
        return view;
    };
    ListView.prototype.setSelection = function (element) {
        if (this.ui()) {
            var node = this.treeModel.get(element);
            if (node == null)
                return false;
            this.selectItem(node.view);
            return true;
        }
        else {
            this.setSelectionInternal([element]);
            return true;
        }
    };
    ListView.prototype.setMultipleSelect = function (ms) {
        this.multipleSelect = ms;
    };
    ListView.prototype.isMultipleSelect = function () {
        return this.multipleSelect;
    };
    ListView.prototype.unselectItem = function (x) {
        if (this._selected == null) {
            return;
        }
        else if (this.multipleSelect) {
            if (this.selectedComponents.indexOf(x) != -1) {
                x.removeClass("selected");
                this.selectedComponents = this.selectedComponents.filter(function (y) { return y != x; });
                this.setSelectionInternal(this.selectedComponents.map(function (x) { return x.getBinding().get(); }));
            }
        }
        else {
            if (this._selected == x) {
                this._selected.removeClass("selected");
                this.setSelectionInternal([]);
            }
        }
    };
    ListView.prototype.selectItem = function (x) {
        if (this.multipleSelect) {
            if (this.selectedComponents.indexOf(x) != -1)
                this.unselectItem(x);
            else {
                x.addClass("selected");
                this.selectedComponents.push(x);
                this.tryScrollToSelected();
                this.setSelectionInternal(this.selectedComponents.map(function (x) { return x.getBinding().get(); }));
            }
        }
        else {
            if (this._selected) {
                this._selected.removeClass("selected");
            }
            x.addClass("selected");
            this._selected = x;
            this.tryScrollToSelected();
            this.setSelectionInternal([x.getBinding().get()]);
        }
    };
    return ListView;
}(StructuredViewer));
exports.ListView = ListView;
var DefaultTreeContentProvider = (function () {
    function DefaultTreeContentProvider(_objectToChildren) {
        this._objectToChildren = _objectToChildren;
    }
    DefaultTreeContentProvider.prototype.hasChildren = function (element) {
        return this.children(element).length > 0;
    };
    DefaultTreeContentProvider.prototype.children = function (element) {
        return this._objectToChildren(element);
    };
    DefaultTreeContentProvider.prototype.elements = function (model) {
        if (model instanceof Array)
            return model;
        return this.children(model);
    };
    DefaultTreeContentProvider.prototype.init = function () {
    };
    DefaultTreeContentProvider.prototype.dispose = function () {
    };
    return DefaultTreeContentProvider;
}());
exports.DefaultTreeContentProvider = DefaultTreeContentProvider;
function listSection(header, icon, input, renderer, addFilter, lf) {
    if (addFilter === void 0) { addFilter = false; }
    if (lf === void 0) { lf = null; }
    var resp = section(header, icon);
    var tw = new ListView(new ArrayContentProvider(), renderer);
    if (lf) {
        tw.setBasicLabelFunction(lf);
    }
    if (addFilter) {
        resp.addChild(filterField(tw));
    }
    tw.setInput(input);
    resp.addChild(tw);
    return resp;
}
exports.listSection = listSection;
function list(input, renderer) {
    var rend = (typeof renderer == "function") ? new SimpleRenderer(renderer) : renderer;
    var tw = new ListView(new ArrayContentProvider(), rend);
    tw.setInput(input);
    return tw;
}
exports.list = list;
var NodeWithKey = (function () {
    function NodeWithKey() {
    }
    return NodeWithKey;
}());
exports.NodeWithKey = NodeWithKey;
var TreeViewer = (function (_super) {
    __extends(TreeViewer, _super);
    function TreeViewer(_tcp, renderer, labelProvider) {
        _super.call(this, _tcp, renderer);
        this._tcp = _tcp;
        this.renderer = renderer;
        this._chhNum = 100;
        this._expandedNodes = [];
        if (labelProvider)
            this.setBasicLabelFunction(labelProvider);
    }
    TreeViewer.prototype.getComparator = function () {
        var _this = this;
        var pcmp = _super.prototype.getComparator.call(this);
        if (pcmp == null)
            return null;
        return function (x, y) { return pcmp(x, y) && _this._tcp.hasChildren(x) == _this._tcp.hasChildren(y); };
    };
    TreeViewer.prototype.customizePanel = function (forced) {
        var _this = this;
        if (forced === void 0) { forced = false; }
        if (!forced && this._panelCustomized === true)
            return;
        this._panelCustomized = true;
        var cpane = this._contentui.ui();
        cpane.onkeydown = function (e) { return _this.handleKey(e); };
        cpane.classList.add("focusable-panel");
        cpane.classList.add("list-tree");
        cpane.classList.add("has-collapsable-children");
        cpane.tabIndex = -1;
    };
    TreeViewer.prototype.isExpanded = function (node) {
        var h = this._expandedNodes.indexOf(this.nodeKey(node)) != -1;
        return h;
    };
    TreeViewer.prototype.getExpanded = function () {
        return [].concat(this._expandedNodes);
    };
    TreeViewer.prototype.setSelection = function (element) {
        var res = _super.prototype.setSelection.call(this, element);
        if (res) {
            this.setExpanded(element, true);
            this.tryScrollToSelected();
        }
        return res;
    };
    TreeViewer.prototype.setExpanded = function (element, state) {
        if (element == null)
            return;
        var node = this.getTreeModel().get(element);
        if (node == null)
            return;
        var view = node.view, parent = node.parent ? node.parent.data : null;
        if (state) {
            if (!this.isExpanded(element)) {
                this.setExpanded(parent, state);
                this._expandedNodes.push(this.nodeKey(element));
                view.addClass("expanded");
                view.removeClass("collapsed");
            }
        }
        else {
            if (this.isExpanded(element)) {
                var k = this.nodeKey(element);
                this._expandedNodes = this._expandedNodes.filter(function (y) { return y != k; });
                view.removeClass("expanded");
                view.addClass("collapsed");
            }
        }
    };
    TreeViewer.prototype.wrapChild = function (element, preview) {
        var _this = this;
        if (this._tcp.hasChildren(element)) {
            var d = new BasicComponent("div");
            var view = _super.prototype.wrapChild.call(this, element, d);
            view.addClass("list-nested-item");
            d.addClass("list-item");
            d.setStyle("display", "inline");
            d.addChild(preview);
            if (!this.isExpanded(element)) {
                view.addClass("collapsed");
            }
            view.addOnClickListener(function (x) {
                if (x.hasClass("collapsed")) {
                    x.removeClass("collapsed");
                    _this._expandedNodes.push(_this.nodeKey(element));
                }
                else {
                    x.addClass("collapsed");
                    _this._expandedNodes = _this._expandedNodes.filter(function (y) { return y != _this.nodeKey(element); });
                }
            });
            var childList = new BasicComponent("ul");
            childList.addClass("list-tree");
            view.addChild(childList);
            this.getTreeModel().registerViews(element, view, childList);
            this.smartUpdateContent(element);
            return view;
        }
        else {
            var view = _super.prototype.wrapChild.call(this, element, preview);
            view.addClass("list-item");
            return view;
        }
    };
    TreeViewer.prototype.unfilteredContent = function (p) {
        if (p) {
            return this._tcp.children(p);
        }
        return _super.prototype.unfilteredContent.call(this, p);
    };
    TreeViewer.prototype.tryExpand = function () {
        var _this = this;
        var v = this.getSelection();
        v.elements.forEach(function (e) { return _this.setExpanded(e, true); });
    };
    TreeViewer.prototype.tryCollapse = function () {
        var _this = this;
        var v = this.getSelection();
        v.elements.forEach(function (e) { return _this.setExpanded(e, false); });
    };
    TreeViewer.prototype.navigateDown = function () {
        // var c = this._selected;
        // if (c) {
        //     if (this.isExpanded(c.getBinding().get())) {
        //         var ch: T[] = <T[]>this.getRenderedContent(c.getBinding().get());
        //         if (ch.length > 0) {
        //             this.setSelection(ch[0]);
        //         }
        //     }
        //     else {
        //         var index = this._components.indexOf(this._selected)
        //         if (index != -1) {
        //             if (index < this._components.length - 1) {
        //                 this.setSelection(this._components[index + 1].getBinding().get())
        //             }
        //         }
        //     }
        // }
    };
    TreeViewer.prototype.navigateUp = function () {
        // var c = this._selected;
        // if (c) {
        //     if ((<any>c).parentModel) {
        //         var ch: T[] = <T[]>this.getRenderedContent((<any>c).parentModel);
        //         var index = ch.indexOf(c.getBinding().get())
        //         if (index == 0) {
        //             this.setSelection((<any>c).parentModel);
        //             return;
        //         }
        //     }
        //     var index = this._components.indexOf(this._selected)
        //     if (index > 0) {
        //         this.setSelection(this._components[index - 1].getBinding().get())
        //     }
        // }
    };
    TreeViewer.prototype.handleKey = function (e) {
        _super.prototype.handleKey.call(this, e);
        if (e.keyCode == 39) {
            this.tryExpand();
        }
        if (e.keyCode == 37) {
            this.tryCollapse();
        }
    };
    TreeViewer.prototype.handleDataChanged = function () {
        var oldInput = this.getInput();
        var newInput = this.getBinding().get();
        this.setInput(newInput, true);
    };
    return TreeViewer;
}(ListView));
exports.TreeViewer = TreeViewer;
function h1(text) {
    return new TextElement("h1", text, null);
}
exports.h1 = h1;
function h2(text) {
    var children = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        children[_i - 1] = arguments[_i];
    }
    var el = new TextElement("h2", text, null);
    children.forEach(function (x) { return el.addChild(x); });
    return el;
}
exports.h2 = h2;
function h3(text) {
    var children = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        children[_i - 1] = arguments[_i];
    }
    var el = new TextElement("h3", text, null);
    children.forEach(function (x) { return el.addChild(x); });
    return el;
}
exports.h3 = h3;
function applyStyling(classes, element, highlights) {
    if (classes) {
        element.addClass(textClassToString(classes));
    }
    if (highlights) {
        element.addClass(highlightToText(highlights));
    }
}
exports.applyStyling = applyStyling;
;
function getGrammar(id) {
    return _.find(atom.grammars.getGrammars(), function (x) { return x.scopeName == id; });
}
var count = 0;
var AtomEditorElement = (function (_super) {
    __extends(AtomEditorElement, _super);
    function AtomEditorElement(text, _onchange) {
        _super.call(this, "atom-text-editor", text);
        this._onchange = _onchange;
        this.mini = true;
        this._txt = this.getBinding().get();
        this.num = count++;
    }
    AtomEditorElement.prototype.setOnChange = function (onChange) {
        this._onchange = onChange;
    };
    AtomEditorElement.prototype.setGrammar = function (id) {
        this.grammar = id;
        if (this.ui()) {
            this.innerSetGrammar();
        }
    };
    AtomEditorElement.prototype.renderUI = function () {
        var u = _super.prototype.renderUI.call(this);
        var oldUnmount = u.unmountComponent;
        var outer = this;
        return u;
    };
    AtomEditorElement.prototype.innerSetGrammar = function () {
        if (this.grammar) {
            var editor = (this.ui().getModel());
            var ag = getGrammar(this.grammar);
            var evH = ag;
            var oldListeners = [].concat(evH.emitter.handlersByEventName["did-update"]);
            editor.setGrammar(ag);
            evH.emitter.handlersByEventName["did-update"] = oldListeners;
        }
    };
    AtomEditorElement.prototype.setMini = function (mini) {
        this.mini = mini;
    };
    AtomEditorElement.prototype.isMini = function () {
        return this.mini;
    };
    AtomEditorElement.prototype.selectAll = function () {
        this.ui().getModel().selectAll();
    };
    AtomEditorElement.prototype.selectNone = function () {
        this.ui().getModel().setSelectedScreenRange([[0, 0], [0, 0]]);
    };
    AtomEditorElement.prototype.setPlaceholder = function (text) {
        this.ui().getModel().setPlaceholderText(text);
    };
    AtomEditorElement.prototype.placeholder = function () {
        return this.ui().getModel().getPlaceholderText();
    };
    AtomEditorElement.prototype.setSoftWrapped = function (wrap) {
        return this.ui().getModel().setSoftWrapped(wrap);
    };
    AtomEditorElement.prototype.dispose = function () {
        if (this._ui) {
            var editor = (this._ui.getModel());
            editor.emitter.handlersByEventName['did-change'] = [];
            editor.emitter.dispose();
            this._ui.model = null;
            try {
                this._ui.component.disposables.dispose();
            }
            catch (e) {
                console.log(e);
            }
        }
        _super.prototype.dispose.call(this);
        this._ui = null;
    };
    AtomEditorElement.prototype.customize = function (element) {
        {
            element.textContent = this.getText();
            if (this.mini) {
                element.setAttribute("mini", '');
            }
            var vv = atom.views;
            var cfg = atom.config;
            var l = atom.styles.emitter.handlersByEventName;
            var sadd = [].concat(l['did-add-style-element']);
            var sremove = [].concat(l['did-remove-style-element']);
            var schange = [].concat(l['did-update-style-element']);
            //var cfgCh:any[]=[].concat(cfg.emitter.handlersByEventName['did-change']);
            var buf = [].concat(vv.documentPollers);
            var editor = (this.ui().getModel());
            vv.documentPollers = buf;
            //cfg.emitter.handlersByEventName['did-change']=cfgCh;
            var ch = editor.emitter.handlersByEventName['did-change'];
            var outer = this;
            this.innerSetGrammar();
            editor.emitter.handlersByEventName['did-change'] = [function (x) {
                    ch && ch[0] && ch[0](x);
                    outer.setAssociatedValue(outer.getValue());
                    outer._onchange(outer, outer.getValue());
                }];
        }
        _super.prototype.customize.call(this, element);
    };
    AtomEditorElement.prototype.setText = function (newText, handle) {
        if (handle === void 0) { handle = true; }
        if (this.ui()) {
            var editor = (this.ui().getModel());
            editor.setText(newText);
        }
        _super.prototype.setText.call(this, newText, handle);
    };
    AtomEditorElement.prototype.handleDataChanged = function () {
        var v = this.getBinding().get();
        this.setText(v ? ("" + v) : "");
        return _super.prototype.handleDataChanged.call(this);
    };
    AtomEditorElement.prototype.getValue = function () {
        return this.ui().getModel().getText();
    };
    return AtomEditorElement;
}(TextElement));
exports.AtomEditorElement = AtomEditorElement;
function input(text, onchange) {
    var v = new AtomEditorElement(text, onchange);
    return v;
}
exports.input = input;
function alignComponents(comps) {
    var maxL = 0;
    comps = comps.filter(function (x) { return (isField(x) && !isCheckBox(x)); });
    if (comps.length < 1)
        return;
    comps.forEach(function (x) {
        var label = x.caption();
        if (label != null && label.length > maxL) {
            maxL = label.length;
        }
    });
    comps.forEach(function (x) {
        var f = x;
        f.setLabelWidth(maxL);
        f.setLabelHeight(f.ui().clientHeight);
    });
}
exports.alignComponents = alignComponents;
function isField(c) {
    if (c instanceof CheckBox) {
        return false;
    }
    if (c["caption"]) {
        if (typeof c["caption"] == 'function') {
            if (c["setLabelWidth"]) {
                if (typeof c["setLabelWidth"] == 'function') {
                    return true;
                }
            }
        }
    }
    return false;
}
function isCheckBox(c) {
    return c instanceof CheckBox;
}
var AbstractWrapEditor = (function (_super) {
    __extends(AbstractWrapEditor, _super);
    function AbstractWrapEditor() {
        _super.apply(this, arguments);
    }
    AbstractWrapEditor.prototype.getBinding = function () {
        return this._actualField.getBinding();
    };
    AbstractWrapEditor.prototype.setBinding = function (b) {
        this._actualField.setBinding(b);
    };
    AbstractWrapEditor.prototype.getActualField = function () {
        return this._actualField;
    };
    AbstractWrapEditor.prototype.addFocusListener = function (e) {
        return this._actualField.addFocusListener(e);
    };
    AbstractWrapEditor.prototype.removeFocusListener = function (e) {
        return this._actualField.addFocusListener(e);
    };
    return AbstractWrapEditor;
}(BasicComponent));
exports.AbstractWrapEditor = AbstractWrapEditor;
var DialogField = (function (_super) {
    __extends(DialogField, _super);
    function DialogField(caption, l) {
        if (l === void 0) { l = LayoutType.INLINE_BLOCK; }
        _super.call(this, "span", null);
        this._required = false;
        this.setCaption(caption);
        this.createLabel(caption);
    }
    DialogField.prototype.setRequired = function (b) {
        this._required = b;
        if (this._textLabel) {
            if (this._required) {
                if (!this._rlab) {
                    this._rlab = label("*", null, TextClasses.HIGHLIGHT).pad(3, 0);
                    this._textLabelPanel.addChild(this._rlab);
                }
                else {
                    this._rlab.setDisplay(true);
                }
            }
            else {
                if (this._rlab) {
                    this._rlab.setDisplay(false);
                }
            }
        }
        this.handleLocalChange();
    };
    DialogField.prototype.setLabelWidth = function (w) {
        this._textLabelPanel.setStyle("width", w + "ch");
    };
    DialogField.prototype.setLabelHeight = function (h) {
        this._textLabel.setStyle("margin-top", "6px");
        //this._textLabel.setStyle("margin-bottom", "0px");
    };
    DialogField.prototype.selfInit = function () {
        this._actualField.setStyle("flex", "1");
        this.setPercentWidth(100);
        this.setStyle("display", "flex");
        this.addChild(this._textLabelPanel);
        this.addChild(this._actualField);
    };
    DialogField.prototype.hideLabel = function () {
        this._textLabelPanel.setStyle("width", "0px");
        this._textLabelPanel.setStyle("margin-right", "0px");
        this.setStyle("margin-right", "0px");
    };
    DialogField.prototype.makeLabelNextToField = function () {
        this._textLabelPanel.setStyle("margin-right", "0px");
    };
    DialogField.prototype.createLabel = function (caption) {
        this._textLabel = label(this.caption());
        this._textLabelPanel = hc(this._textLabel);
        this._textLabelPanel.addChild(this._textLabel);
        this.setRequired(this._required);
        this._textLabelPanel.setStyle("float", "left");
    };
    return DialogField;
}(AbstractWrapEditor));
exports.DialogField = DialogField;
var WrapEditor = (function (_super) {
    __extends(WrapEditor, _super);
    function WrapEditor() {
        _super.call(this, "div");
    }
    WrapEditor.prototype.selfRender = function () {
        return _super.prototype.selfRender.call(this);
    };
    WrapEditor.prototype.createBinding = function () {
        return new BasicBinding();
    };
    WrapEditor.prototype.setActualField = function (newField, conv) {
        if (this._actualField != null && this._actualField.ui()) {
            var oldUI = this._actualField.ui();
            var oldV = this._actualField.getBinding().get();
            newField.getBinding().set(conv(oldV));
            var node = this.ui();
            var newUI = newField.ui(); //?newField.ui():newField.renderUI()
            node.replaceChild(newUI, oldUI);
            this.removeChild(this._actualField);
        }
        this._actualField = newField;
        this.addChild(newField);
    };
    return WrapEditor;
}(AbstractWrapEditor));
exports.WrapEditor = WrapEditor;
var TwoDispatchBinding = (function () {
    function TwoDispatchBinding(f, s, active) {
        this.f = f;
        this.s = s;
        this.active = active;
    }
    TwoDispatchBinding.prototype.get = function () {
        var val = this.active.get();
        if (this.active == this.f) {
            if (this.firstConverter) {
                val = this.firstConverter(val);
            }
        }
        if (this.active == this.s) {
            if (this.secondConverter) {
                val = this.secondConverter(val);
            }
        }
        return val;
    };
    TwoDispatchBinding.prototype.set = function (v) {
        this.active.set(v);
    };
    TwoDispatchBinding.prototype.addValidator = function (v) {
    };
    TwoDispatchBinding.prototype.removeValidator = function (v) {
    };
    TwoDispatchBinding.prototype.addStatusListener = function (s) {
    };
    TwoDispatchBinding.prototype.removeStatusListener = function (s) {
    };
    TwoDispatchBinding.prototype.status = function () {
        return this.active.status();
    };
    TwoDispatchBinding.prototype.addListener = function (listener) {
        this.f.addListener(listener);
        this.s.addListener(listener);
    };
    TwoDispatchBinding.prototype.removeListener = function (listener) {
        this.f.removeListener(listener);
        this.s.removeListener(listener);
    };
    return TwoDispatchBinding;
}());
var StuffWithButtons = (function (_super) {
    __extends(StuffWithButtons, _super);
    function StuffWithButtons(host) {
        _super.call(this);
        this.host = host;
    }
    StuffWithButtons.prototype.setPlusVisible = function (v) {
        var _this = this;
        if (!v) {
            if (this.plus) {
                this.plus.setDisplay(false);
            }
        }
        else {
            if (this.plus) {
                this.plus.setDisplay(true);
            }
            else {
                this.plus = a("+", function (x) {
                    _this.host.createElementUI();
                    _this.host.updateSigns();
                });
                this.addChild(this.plus);
            }
        }
    };
    StuffWithButtons.prototype.setMinusVisible = function (v) {
        var _this = this;
        if (!v) {
            if (this.minus) {
                this.minus.setDisplay(false);
                this.minus = null;
            }
        }
        else {
            if (this.minus) {
                this.minus.setDisplay(true);
            }
            else {
                var minus = a("-", function (x) {
                    _this.host._actualField.removeChild(_this);
                    _this.host.containers = _this.host.containers.filter(function (x) { return x != _this; });
                    _this.host.updateSigns();
                    //now we should
                });
                this.minus = minus;
                this.addChild(minus);
            }
        }
    };
    return StuffWithButtons;
}(Panel));
exports.StuffWithButtons = StuffWithButtons;
var MultiValueField = (function (_super) {
    __extends(MultiValueField, _super);
    function MultiValueField(caption, value, onChange, _controller) {
        var _this = this;
        _super.call(this, caption, LayoutType.INLINE_BLOCK);
        this._controller = _controller;
        this.containers = [];
        this._actualField = new Panel();
        var items = this._controller.decompose(value);
        items.forEach(function (x) {
            _this.createElementUI(x);
        });
        this.updateSigns();
    }
    MultiValueField.prototype.updateSigns = function () {
        this.containers.forEach(function (x) { return x.setPlusVisible(false); });
        if (this.containers.length == 0) {
            this.createElementUI(null);
        }
        this.containers[this.containers.length - 1].setMinusVisible(true);
        this.containers[this.containers.length - 1].setPlusVisible(true);
        if (this.containers.length == 1) {
            this.containers[0].setMinusVisible(false);
        }
        this.getBinding().set(this._controller.compose(this.containers.map(function (x) { return x.embedded.getBinding().get(); })));
    };
    MultiValueField.prototype.createElementUI = function (v) {
        var _this = this;
        var fld = this._controller.createNewField();
        fld.getBinding().set(v);
        fld.getBinding().addListener(function (x) {
            var vl = fld.getBinding().get();
            _this.getBinding().set(_this._controller.compose(_this.containers.map(function (x) { return x.embedded.getBinding().get(); })));
        });
        var container = new StuffWithButtons(this);
        container.addChild(fld);
        container.embedded = fld;
        container.setMinusVisible(true);
        container.setPlusVisible(true);
        this._actualField.addChild(container);
        this.containers.push(container);
        return container;
    };
    return MultiValueField;
}(DialogField));
exports.MultiValueField = MultiValueField;
var FieldWithCustomization = (function (_super) {
    __extends(FieldWithCustomization, _super);
    function FieldWithCustomization(caption, value, onChange, _controller) {
        var _this = this;
        _super.call(this, caption, LayoutType.INLINE_BLOCK);
        this._controller = _controller;
        this._actualField = new Panel();
        this.hideLabel();
        var basic = this._controller.createBasicField();
        this.basic = basic;
        var details = this._controller.createDetailsField();
        this._actualField.addChild(basic);
        this._actualField.addChild(details);
        this.defails = details;
        var basicPart = this._controller.getBasicPart(value);
        basic.getBinding().set(basicPart);
        details.setDisplay(this._controller.isDetailsVisible(basicPart, value));
        basic.getBinding().addListener(function (x) {
            var nv = _this.getBinding().get();
            var bp = basic.getBinding().get();
            details.setDisplay(_this._controller.isDetailsVisible(bp, nv));
            _this._controller.updateDetails(bp, nv, details);
        });
    }
    FieldWithCustomization.prototype.getBinding = function () {
        return this._binding;
    };
    FieldWithCustomization.prototype.handleDataChanged = function () {
        var value = this.getBinding().get();
        var bp = this._controller.getBasicPart(value);
        this.basic.getBinding().set(bp);
        this.defails.setDisplay(this._controller.isDetailsVisible(bp, value));
        this._controller.updateDetails(bp, value, this.defails);
        return _super.prototype.handleDataChanged.call(this);
    };
    return FieldWithCustomization;
}(DialogField));
exports.FieldWithCustomization = FieldWithCustomization;
var DialogFieldWithModes = (function (_super) {
    __extends(DialogFieldWithModes, _super);
    function DialogFieldWithModes(caption, value, onChange, _config) {
        var _this = this;
        _super.call(this, caption, LayoutType.INLINE_BLOCK);
        this._config = _config;
        this.isFirst = false;
        this._actualField = new WrapEditor();
        var canGo = false;
        if (_config.firstValidator(value).code != StatusCode.ERROR) {
            this._actualField.setActualField(_config.firstOption, _config.secondToFirstConverter);
            this.isFirst = true;
            canGo = _config.secondValidator(value).code == StatusCode.OK;
        }
        else {
            this._actualField.setActualField(_config.secondOption, _config.firstToSecondConverter);
        }
        this.ref = a(this.isFirst ? _config.firstOptionLabel : _config.secondOptionLabel, function (x) {
            _this.switchMode();
        });
        this.ref.setDisabled(!canGo);
        if (this.isFirst && _config.valueComesAsSecond) {
            value = this._config.secondToFirstConverter(value);
        }
        this.getBinding().set(value);
        this.getBinding().addListener(function (x) {
            if (_this.isFirst) {
                canGo = _this._config.secondValidator(x).code == StatusCode.OK;
            }
            else {
                canGo = _this._config.firstValidator(x).code == StatusCode.OK;
            }
            _this.ref.setDisabled(!canGo);
        });
    }
    DialogFieldWithModes.prototype.getBinding = function () {
        var bnd = new TwoDispatchBinding(this._config.firstOption.getBinding(), this._config.secondOption.getBinding(), this._actualField.getBinding());
        bnd.firstConverter = this._config.firstToOutConverter;
        bnd.secondConverter = this._config.secondToOutConverter;
        return bnd;
    };
    DialogFieldWithModes.prototype.switchMode = function () {
        if (this.isFirst) {
            this._actualField.setActualField(this._config.secondOption, this._config.firstToSecondConverter);
            this.isFirst = false;
            this.ref.setText(this._config.secondOptionLabel);
        }
        else {
            this._actualField.setActualField(this._config.firstOption, this._config.secondToFirstConverter);
            this.isFirst = true;
            this.ref.setText(this._config.firstOptionLabel);
        }
    };
    DialogFieldWithModes.prototype.selfInit = function () {
        _super.prototype.selfInit.call(this);
        this.addChild(this.ref);
    };
    return DialogFieldWithModes;
}(DialogField));
exports.DialogFieldWithModes = DialogFieldWithModes;
var TextField = (function (_super) {
    __extends(TextField, _super);
    function TextField(caption, value, onChange, layoutType, placeholder) {
        if (layoutType === void 0) { layoutType = LayoutType.INLINE_BLOCK; }
        _super.call(this, caption, layoutType);
        this._actualField = input(value, onChange);
        if (typeof (value) == 'string')
            this.getBinding().set(value);
        if (placeholder)
            this.getActualField().setPlaceholder(placeholder);
        this.getActualField().setSoftWrapped(false);
    }
    TextField.prototype.setTabIndex = function (index) {
        this.getActualField().setTabIndex(index);
    };
    TextField.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._actualField.dispose();
    };
    TextField.prototype.customize = function (element) {
        _super.prototype.customize.call(this, element);
        this.addClass('text-field');
    };
    return TextField;
}(DialogField));
exports.TextField = TextField;
var SelectField = (function (_super) {
    __extends(SelectField, _super);
    function SelectField(caption, onChange, value, ic, options, l) {
        if (options === void 0) { options = []; }
        if (l === void 0) { l = LayoutType.INLINE_BLOCK; }
        _super.call(this, caption, l);
        this._actualField = new Select(caption, onChange, ic);
        this._actualField.setOptions(options);
        this.getBinding().set(value);
    }
    SelectField.prototype.setDisabled = function (disabled) {
        return this.getActualField().setDisabled(disabled);
    };
    return SelectField;
}(DialogField));
exports.SelectField = SelectField;
var LabelField = (function (_super) {
    __extends(LabelField, _super);
    function LabelField(caption, value, icon, tc, hl, l) {
        if (caption === void 0) { caption = ''; }
        if (value === void 0) { value = ''; }
        if (l === void 0) { l = LayoutType.INLINE_BLOCK; }
        _super.call(this, caption, l);
        this._actualField = new Label(value, icon);
        if (tc || hl)
            applyStyling(tc, this._actualField, hl);
    }
    LabelField.prototype.setText = function (text, handle) {
        this.getActualField().setText(text, handle);
    };
    LabelField.prototype.getText = function () { return this.getActualField().getText(); };
    return LabelField;
}(DialogField));
exports.LabelField = LabelField;
var CustomField = (function (_super) {
    __extends(CustomField, _super);
    function CustomField(caption, value, onChange, l) {
        if (l === void 0) { l = LayoutType.INLINE_BLOCK; }
        _super.call(this, caption, l);
        this._actualField = value;
    }
    return CustomField;
}(DialogField));
exports.CustomField = CustomField;
var EnumField = (function (_super) {
    __extends(EnumField, _super);
    function EnumField(caption, value, options, onChange, l) {
        if (l === void 0) { l = LayoutType.INLINE_BLOCK; }
        _super.call(this, caption, l);
        this.options = options;
        this.createLabel(caption);
        this._actualField = new Select(value, onChange);
        this._actualField.setOptions(options);
        this._actualField.setStyle("margin-bottom", "0.75em");
        this._actualField.setValue(value);
    }
    EnumField.prototype.setRequired = function (b) {
        _super.prototype.setRequired.call(this, b);
        if (this._actualField) {
            if (!b) {
                this._actualField.setOptions(_.unique(this.options.concat([''])));
            }
            else {
                this._actualField.setOptions(this.options);
            }
        }
    };
    return EnumField;
}(DialogField));
exports.EnumField = EnumField;
function texfField(lbl, text, onchange) {
    return new TextField(lbl, text, onchange);
}
exports.texfField = texfField;
(function (FieldTypes) {
    FieldTypes[FieldTypes["BOOL"] = 0] = "BOOL";
    FieldTypes[FieldTypes["STRING"] = 1] = "STRING";
    FieldTypes[FieldTypes["NUMBER"] = 2] = "NUMBER";
    FieldTypes[FieldTypes["INTEGER"] = 3] = "INTEGER";
    FieldTypes[FieldTypes["ENUM"] = 4] = "ENUM";
    FieldTypes[FieldTypes["DATE"] = 5] = "DATE";
})(exports.FieldTypes || (exports.FieldTypes = {}));
var FieldTypes = exports.FieldTypes;
function createInputField(spec, vl, onchange) {
    if (onchange === void 0) { onchange = function (x) { return x; }; }
    var res = null;
    if (vl == null) {
        vl = "";
    }
    switch (spec.type) {
        case FieldTypes.BOOL:
            res = new CheckBox("", null, onchange).pad(-10, 10);
            break;
        case FieldTypes.STRING:
            res = texfField(spec.caption, "" + vl, onchange);
            break;
        case FieldTypes.NUMBER:
        case FieldTypes.INTEGER:
            res = texfField(spec.caption, "" + vl, onchange);
            res.getBinding().addValidator(function (x) {
                if (isNaN(x)) {
                    return { code: StatusCode.ERROR, message: spec.caption + " should be a number" };
                }
                if (spec.type == FieldTypes.INTEGER) {
                    if (x && x.indexOf(".") != -1) {
                        return { code: StatusCode.ERROR, message: spec.caption + " should be integer" };
                    }
                }
                return { code: StatusCode.OK, message: "" };
            });
            break;
        case FieldTypes.ENUM:
            res = new EnumField(spec.caption, "" + vl, spec.realm, onchange);
            break;
        case FieldTypes.DATE:
            res = texfField(spec.caption, "" + vl, onchange);
            break;
        default:
            res = texfField(spec.caption + "(untyped)", "" + vl, onchange);
    }
    res.getBinding().set(vl);
    res.setRequired(spec.required);
    if (spec.required) {
        res.getBinding().addValidator(function (x) { return (x != null && x.length > 0) ? { code: StatusCode.OK, message: "" } : { code: StatusCode.ERROR, message: spec.caption + " is required" }; });
    }
    return res;
}
exports.createInputField = createInputField;
function okStatus() {
    return { code: StatusCode.OK, message: "" };
}
exports.okStatus = okStatus;
function errorStatus(message) {
    return { code: StatusCode.ERROR, message: message };
}
exports.errorStatus = errorStatus;
function createSmallTypeScriptEditor(caption, value, onchange) {
    if (onchange === void 0) { onchange = function (x) { return x; }; }
    var res = texfField(caption, value, onchange);
    res.getActualField().setGrammar("source.ts");
    return res;
}
exports.createSmallTypeScriptEditor = createSmallTypeScriptEditor;
//export function createField(caption:string,initialValue:any,req:boolean)
var BasicListanable = (function () {
    function BasicListanable() {
        this._listeners = [];
    }
    BasicListanable.prototype.addListener = function (listener) {
        this._listeners.push(listener);
    };
    BasicListanable.prototype.removeListener = function (listener) {
        this._listeners = this._listeners.filter(function (x) { return x != listener; });
    };
    BasicListanable.prototype.fireChange = function (e) {
        var _this = this;
        this._listeners.forEach(function (x) { return _this.notify(e, x); });
    };
    BasicListanable.prototype.notify = function (e, l) {
        throw new Error("Not implemented");
    };
    return BasicListanable;
}());
exports.BasicListanable = BasicListanable;
var BasicFilter = (function (_super) {
    __extends(BasicFilter, _super);
    function BasicFilter() {
        _super.apply(this, arguments);
        this._filterPattern = "";
    }
    BasicFilter.prototype.setPattern = function (s) {
        this._filterPattern = s;
        this.fireChange(new PropertyChangeEvent(this));
    };
    BasicFilter.prototype.getPatten = function () {
        return this._filterPattern;
    };
    BasicFilter.prototype.accept = function (viewer, value, parent) {
        if (viewer.getBasicLabelFunction()) {
            value = viewer.getBasicLabelFunction()(value);
        }
        if (value && value["filterLabel"]) {
            if (typeof value["filterLabel"] == 'function') {
                return value["filterLabel"]().indexOf(this._filterPattern) != -1;
            }
        }
        if (this._filterPattern.length > 0) {
            try {
                return JSON.stringify(value).indexOf(this._filterPattern) != -1;
            }
            catch (e) {
                return true;
            }
        }
        return true;
    };
    BasicFilter.prototype.notify = function (e, l) {
        l(e);
    };
    return BasicFilter;
}(BasicListanable));
exports.BasicFilter = BasicFilter;
var ToggleFilter = (function (_super) {
    __extends(ToggleFilter, _super);
    function ToggleFilter(func) {
        _super.call(this);
        this._on = false;
        this._func = func;
    }
    ToggleFilter.prototype.setOn = function (s) {
        this._on = s;
        this.fireChange(new PropertyChangeEvent(this));
    };
    ToggleFilter.prototype.isOn = function () {
        return this._on;
    };
    ToggleFilter.prototype.accept = function (viewer, value, parent) {
        if (!this._on) {
            return true;
        }
        return this._func(value);
    };
    ToggleFilter.prototype.notify = function (e, l) {
        l(e);
    };
    return ToggleFilter;
}(BasicListanable));
exports.ToggleFilter = ToggleFilter;
var Section = (function (_super) {
    __extends(Section, _super);
    function Section(_header, collapsible) {
        _super.call(this);
        this._header = _header;
        this._headerVisible = true;
        this._expanded = true;
        this.setCollapsible(collapsible);
        _header.setPercentWidth(100);
        _header.addClass("sub-title");
    }
    Section.prototype.getHeaderVisible = function () {
        return this._headerVisible;
    };
    Section.prototype.setHeaderVisible = function (value) {
        this._headerVisible = value;
        if (!value) {
            this.setExpanded(true);
        }
        this.handleLocalChange();
    };
    Section.prototype.caption = function () { return this._header.caption(); };
    Section.prototype.isExpanded = function () {
        return this._expanded;
    };
    Section.prototype.getHeader = function () {
        return this._header;
    };
    Section.prototype.getIcon = function () {
        return this._header.getIcon();
    };
    Section.prototype.customize = function (element) {
        if (this._headerVisible) {
            element.appendChild(this._header.ui());
        }
        if (!this._expanded) {
            this.setExpanded(this._expanded);
        }
        _super.prototype.customize.call(this, element);
    };
    Section.prototype.setCollapsible = function (c) {
        var _this = this;
        if (!c) {
            if (this._chevron) {
                this._header.removeChild(this._chevron);
                this._header.removeOnClickListener(this._collapseListener);
                this._chevron = null;
            }
        }
        else {
            if (!this._chevron) {
                var l = label("", Icon.CHEVRON_RIGHT).setStyle("float", "left");
                this._chevron = l;
                this._header.addChild(l);
                this._collapseListener = function (x) {
                    _this.setExpanded(!_this.isExpanded());
                };
                this._header.addOnClickListener(this._collapseListener);
            }
        }
    };
    Section.prototype.setExpanded = function (expanded) {
        if (this._chevron) {
            this._chevron.setIcon(expanded ? Icon.CHEVRON_DOWN : Icon.CHEVRON_RIGHT);
        }
        this._children.forEach(function (x, n) {
            if (x instanceof BasicComponent) {
                x.setDisplay(expanded);
            }
        });
        this._expanded = expanded;
    };
    return Section;
}(Panel));
exports.Section = Section;
var BasicViewer = (function (_super) {
    __extends(BasicViewer, _super);
    function BasicViewer(renderer) {
        _super.call(this, "div", null);
        this.panel = new Panel();
        this.renderer = renderer;
    }
    BasicViewer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    BasicViewer.prototype.renderUI = function () {
        return this.panel.renderUI();
    };
    BasicViewer.prototype.setInput = function (value, refresh) {
        if (refresh === void 0) { refresh = true; }
        this._model = value;
        var ui = this.renderer.render(value);
        if (this.panel) {
            this.panel.clear();
            this.panel.addChild(ui);
        }
    };
    return BasicViewer;
}(Viewer));
exports.BasicViewer = BasicViewer;
var TabFolder = (function (_super) {
    __extends(TabFolder, _super);
    function TabFolder() {
        _super.call(this, LayoutType.BLOCK);
        this._selectedIndex = -1;
        this._buttons = vc();
        this._tabs = [];
        this._buttons.margin(0, 0, 0, 4);
        _super.prototype.addChild.call(this, this._buttons);
    }
    TabFolder.prototype.add = function (header, icon, content, extraClass) {
        var _this = this;
        var len = this._tabs.length;
        var button = new ToggleButton(header, ButtonSizes.SMALL, ButtonHighlights.NO_HIGHLIGHT, icon, function () { return _this.setSelectedIndex(len); });
        if (extraClass) {
            button.addClass(extraClass);
        }
        this._tabs.push({
            header: header,
            icon: icon,
            button: button,
            hidden: false,
            content: content
        });
        this._buttons.addChild(button);
        if (len == 0)
            this.setSelectedIndex(0);
    };
    TabFolder.prototype.tabsCount = function () {
        return this._tabs.length;
    };
    TabFolder.prototype.addChild = function (childPanel) {
        this.add(childPanel.caption(), childPanel.getIcon(), childPanel);
    };
    TabFolder.prototype.replaceChild = function (newChild, oldChild) {
        _super.prototype.addChild.call(this, newChild, oldChild);
        this.removeChild(oldChild);
    };
    TabFolder.prototype.get = function (index) {
        if (index < 0 || index > this._tabs.length)
            return null;
        return {
            header: this._tabs[index].header,
            content: this._tabs[index].content
        };
    };
    TabFolder.prototype.setOnSelected = function (f) {
        this._onselected = f;
    };
    TabFolder.prototype.selectedComponent = function () {
        return this._tabs[this._selectedIndex].content;
    };
    TabFolder.prototype.toggle = function (index, show) {
        if (index < 0 || index > this._tabs.length)
            return;
        var tab = this._tabs[index];
        if (!show && index == this._selectedIndex)
            this.setSelectedIndex(0);
        tab.hidden = !show;
        tab.button.setDisplay(show);
    };
    TabFolder.prototype.setSelectedIndex = function (index) {
        while (this._tabs[index].hidden)
            index++;
        if (index < 0 || index > this._tabs.length || index == this._selectedIndex)
            return;
        var newTab = this._tabs[index];
        newTab.button.setSelected(true);
        if (this._selectedIndex >= 0) {
            var oldTab = this._tabs[this._selectedIndex];
            oldTab.button.setSelected(false);
            this.replaceChild(newTab.content, oldTab.content);
        }
        else {
            _super.prototype.addChild.call(this, newTab.content);
        }
        if (newTab.content instanceof BasicComponent)
            newTab.content.margin(0, 0, 4, 4);
        this._selectedIndex = index;
        if (this._onselected) {
            this._onselected();
        }
    };
    return TabFolder;
}(Panel));
exports.TabFolder = TabFolder;
function label(text, ic, tc, th) {
    if (ic === void 0) { ic = null; }
    if (tc === void 0) { tc = null; }
    if (th === void 0) { th = null; }
    var v = new TextElement("label", text, ic);
    applyStyling(tc, v, th);
    return v;
}
exports.label = label;
function html(text) {
    var v = new InlineHTMLElement("span", text);
    return v;
}
exports.html = html;
function a(text, e, ic, tc, th) {
    if (ic === void 0) { ic = null; }
    if (tc === void 0) { tc = null; }
    if (th === void 0) { th = null; }
    var v = new TextElement("a", text, ic);
    v.addOnClickListener(e);
    applyStyling(tc, v, th);
    return v;
}
exports.a = a;
function checkBox(caption, h) {
    if (h === void 0) { h = function (x) { }; }
    return new CheckBox(caption, null, h);
}
exports.checkBox = checkBox;
function select(caption) {
    return new Select(caption, function (x) { return x; });
}
exports.select = select;
function button(txt, _size, _highlight, _icon, onClick) {
    if (_size === void 0) { _size = ButtonSizes.NORMAL; }
    if (_highlight === void 0) { _highlight = ButtonHighlights.NO_HIGHLIGHT; }
    if (_icon === void 0) { _icon = null; }
    if (onClick === void 0) { onClick = null; }
    return new Button(txt, _size, _highlight, _icon, onClick);
}
exports.button = button;
function buttonSimple(txt, onClick, _icon) {
    if (onClick === void 0) { onClick = null; }
    if (_icon === void 0) { _icon = null; }
    return new Button(txt, ButtonSizes.NORMAL, ButtonHighlights.NO_HIGHLIGHT, _icon, onClick);
}
exports.buttonSimple = buttonSimple;
function toggle(txt, _size, _highlight, _icon, onClick) {
    if (_size === void 0) { _size = ButtonSizes.NORMAL; }
    if (_highlight === void 0) { _highlight = ButtonHighlights.NO_HIGHLIGHT; }
    if (_icon === void 0) { _icon = null; }
    if (onClick === void 0) { onClick = null; }
    return new ToggleButton(txt, _size, _highlight, _icon, onClick);
}
exports.toggle = toggle;
function renderer(v) {
    return new SimpleRenderer(v);
}
exports.renderer = renderer;
function treeViewer(childFunc, renderer, labelProvider) {
    return new TreeViewer(new DefaultTreeContentProvider(childFunc), renderer, labelProvider);
}
exports.treeViewer = treeViewer;
function treeViewerSection(header, icon, input, childFunc, renderer) {
    var resp = section(header, icon);
    var tw = treeViewer(childFunc, renderer);
    tw.renderUI();
    tw.setInput(input);
    resp.addChild(filterField(tw));
    resp.viewer = tw;
    resp.addChild(tw);
    return resp;
}
exports.treeViewerSection = treeViewerSection;
function filterField(viewer) {
    var flt = new BasicFilter();
    var t = new TextField("Filter:", "", function (x) {
        flt.setPattern(x.getValue());
    }, LayoutType.INLINE_BLOCK);
    t.setStyle("margin-bottom", "5px");
    viewer.addViewerFilter(flt);
    return t;
}
exports.filterField = filterField;
function toggleFilter(viewer, icon, pred, on, desc) {
    if (on === void 0) { on = false; }
    if (desc === void 0) { desc = ""; }
    var flt = new ToggleFilter(pred);
    var t = toggle("", ButtonSizes.EXTRA_SMALL, ButtonHighlights.NO_HIGHLIGHT, icon, function (x) {
        flt.setOn(!flt.isOn());
    });
    t.setSelected(on);
    flt.setOn(on);
    viewer.addViewerFilter(flt);
    return t;
}
exports.toggleFilter = toggleFilter;
function section(text, ic, collapsable, colapsed) {
    if (ic === void 0) { ic = null; }
    if (collapsable === void 0) { collapsable = true; }
    if (colapsed === void 0) { colapsed = false; }
    var children = [];
    for (var _i = 4; _i < arguments.length; _i++) {
        children[_i - 4] = arguments[_i];
    }
    var textElement = new TextElement("h2", text, ic);
    var newSection = new Section(textElement, collapsable);
    children.filter(function (x) { return x != null; }).forEach(function (x) { return newSection.addChild(x); });
    newSection.setExpanded(!colapsed);
    return newSection;
}
exports.section = section;
function masterDetailsPanel(selectionProvider, viewer, convert, horizontal) {
    if (convert === void 0) { convert = null; }
    if (horizontal === void 0) { horizontal = false; }
    var panel = horizontal ? hc(selectionProvider, viewer) : vc(selectionProvider, viewer);
    masterDetails(selectionProvider, viewer, convert);
    return panel;
}
exports.masterDetailsPanel = masterDetailsPanel;
function hcTight() {
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        children[_i - 0] = arguments[_i];
    }
    var panel = new Panel(LayoutType.INLINE_BLOCK_TIGHT);
    children.forEach(function (x) { return panel.addChild(x); });
    return panel;
}
exports.hcTight = hcTight;
function hc() {
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        children[_i - 0] = arguments[_i];
    }
    var panel = new Panel(LayoutType.INLINE_BLOCK);
    children.forEach(function (x) { return panel.addChild(x); });
    return panel;
}
exports.hc = hc;
function vc() {
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        children[_i - 0] = arguments[_i];
    }
    var panel = new Panel(LayoutType.BLOCK);
    children.forEach(function (x) { return panel.addChild(x); });
    return panel;
}
exports.vc = vc;
function li() {
    var children = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        children[_i - 0] = arguments[_i];
    }
    var panel = new Panel(LayoutType.BLOCK);
    panel.setTagName("li");
    children.forEach(function (x) { return panel.addChild(x); });
    return panel;
}
exports.li = li;
function masterDetails(selectionProvider, viewer, convert) {
    if (convert === void 0) { convert = null; }
    selectionProvider.addSelectionListener({
        selectionChanged: function (e) {
            if (!e.selection.isEmpty()) {
                var val = e.selection.elements[0];
                if (convert) {
                    var vl = convert(val);
                    viewer.setInput(vl);
                }
                else {
                    viewer.setInput(val);
                }
            }
            else {
                viewer.setInput(null);
            }
        }
    });
}
exports.masterDetails = masterDetails;
/**
 * function to show dialog prompt
 * @param name
 * @param callBack
 * @param initialValue
 */
function prompt(name, callBack, initialValue) {
    var pane = null;
    var sectionC = section(name, Icon.BOOK, false, false);
    var textValue = initialValue;
    sectionC.addChild(new AtomEditorElement(initialValue, function (x) { return textValue = x.getBinding().get(); }));
    var buttonBar = hc().setPercentWidth(100).setStyle("display", "flex");
    buttonBar.addChild(label("", null, null, null).setStyle("flex", "1"));
    buttonBar.addChild(button("Cancel", ButtonSizes.NORMAL, ButtonHighlights.NO_HIGHLIGHT, Icon.NONE, function (x) { pane.destroy(); }).margin(10, 10));
    var okButton = button("Submit", ButtonSizes.NORMAL, ButtonHighlights.SUCCESS, Icon.NONE, function (x) {
        pane.destroy();
        callBack(textValue);
    });
    buttonBar.addChild(okButton);
    sectionC.addChild(buttonBar);
    pane = atom.workspace.addModalPanel({ item: sectionC.renderUI() });
}
exports.prompt = prompt;
exports.fdUtils = require("./fileDialogUtils");
//# sourceMappingURL=UI.js.map