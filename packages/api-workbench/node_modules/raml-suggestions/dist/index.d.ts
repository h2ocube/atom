export interface ICompletionContentProvider {
    contentDirName(content: IContent): string;
    dirName(string: string): string;
    exists(path: string): boolean;
    resolve(contextPath: string, relativePath: string): string;
    isDirectory(path: string): boolean;
    readDir(path: string): string[];
}
export interface Suggestion {
    text?: string;
    description?: string;
    displayText?: string;
    prefix?: string;
}
export interface IContent {
    getText(): string;
    getPath(): string;
    getBaseName(): string;
}
export interface IPosition {
    getOffset(): number;
}
export declare class CompletionRequest {
    content: IContent;
    position: IPosition;
    private prefixValue;
    constructor(content: IContent, position: IPosition);
    prefix(): string;
    setPrefix(value: string): void;
    valuePrefix(): string;
}
export declare class CompletionProvider {
    contentProvider: ICompletionContentProvider;
    currentRequest: CompletionRequest;
    level: number;
    constructor(contentProvider: ICompletionContentProvider);
    suggest(request: CompletionRequest, doPostProcess?: boolean): any[];
}
export interface FSResolver {
    content(path: string): string;
    list(path: string): string[];
    exists(path: string): boolean;
    contentAsync(path: string): Promise<string>;
    dirname(path: string): string;
    resolve(contextPath: string, relativePath: string): string;
    extname(path: string): string;
    isDirectory(path: string): boolean;
}
export declare function getContentProvider(resolver: FSResolver): ICompletionContentProvider;
