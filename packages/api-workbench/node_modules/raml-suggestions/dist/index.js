"use strict";
var completionProvider = require('./completionProvider');
var CompletionRequest = (function () {
    function CompletionRequest(content, position) {
        this.content = content;
        this.position = position;
    }
    CompletionRequest.prototype.prefix = function () {
        if (typeof this.prefixValue !== 'undefined') {
            return this.prefixValue;
        }
        return completionProvider.getPrefix(this);
    };
    CompletionRequest.prototype.setPrefix = function (value) {
        this.prefixValue = value;
    };
    CompletionRequest.prototype.valuePrefix = function () {
        var offset = this.position.getOffset();
        var text = this.content.getText();
        for (var i = offset - 1; i >= 0; i--) {
            var c = text.charAt(i);
            if (c === '\r' || c === '\n' || c === ' ' || c === '\t' || c === '"' || c === '\'' || c === ':' || c === '(') {
                return text.substring(i + 1, offset);
            }
        }
        return "";
    };
    return CompletionRequest;
}());
exports.CompletionRequest = CompletionRequest;
var CompletionProvider = (function () {
    function CompletionProvider(contentProvider) {
        this.currentRequest = null;
        this.level = 0;
        this.contentProvider = contentProvider;
    }
    CompletionProvider.prototype.suggest = function (request, doPostProcess) {
        if (doPostProcess === void 0) { doPostProcess = false; }
        var suggestions = completionProvider.suggest(request, this);
        return doPostProcess ? completionProvider.postProcess(suggestions, request) : suggestions;
    };
    return CompletionProvider;
}());
exports.CompletionProvider = CompletionProvider;
function getContentProvider(resolver) {
    return completionProvider.getContentProvider(resolver);
}
exports.getContentProvider = getContentProvider;
//# sourceMappingURL=index.js.map