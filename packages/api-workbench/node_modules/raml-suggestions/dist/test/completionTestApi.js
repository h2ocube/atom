/// <reference path="../../typings/main.d.ts" />
"use strict";
var completion = require('../index');
var path = require('path');
var fs = require('fs');
var index_1 = require("../index");
var ContentProvider = (function () {
    function ContentProvider() {
    }
    ContentProvider.prototype.contentDirName = function (content) {
        var contentPath = content.getPath();
        return path.dirname(contentPath);
    };
    ContentProvider.prototype.dirName = function (childPath) {
        return path.dirname(childPath);
    };
    ContentProvider.prototype.exists = function (checkPath) {
        return fs.existsSync(checkPath);
    };
    ContentProvider.prototype.resolve = function (contextPath, relativePath) {
        return path.resolve(contextPath, relativePath);
    };
    ContentProvider.prototype.isDirectory = function (dirPath) {
        var stat = fs.statSync(dirPath);
        return stat && stat.isDirectory();
    };
    ContentProvider.prototype.readDir = function (dirPath) {
        return fs.readdirSync(dirPath);
    };
    return ContentProvider;
}());
var FSContent = (function () {
    function FSContent(filePath) {
        this.filePath = filePath;
        this.text = fs.readFileSync(filePath).toString();
    }
    FSContent.prototype.getText = function () {
        return this.text;
    };
    FSContent.prototype.getPath = function () {
        return this.filePath;
    };
    FSContent.prototype.getBaseName = function () {
        return path.basename(this.filePath);
    };
    return FSContent;
}());
var Position = (function () {
    function Position(offset) {
        this.offset = offset;
    }
    Position.prototype.getOffset = function () {
        return this.offset;
    };
    return Position;
}());
function offsetForEntry(entry, text) {
    return text.indexOf(entry) + entry.length;
}
function resolve(testPath) {
    return path.resolve(__dirname, '../../tests/' + testPath);
}
function completionByOffset(filePath, offset) {
    var completionProvider = new index_1.CompletionProvider(new ContentProvider());
    var content = new FSContent(resolve(filePath));
    var position = new Position(offset);
    var result = completionProvider.suggest(new completion.CompletionRequest(content, position), true);
    return result.map(function (suggestion) { return suggestion.displayText || suggestion.text; }).join(', ');
}
exports.completionByOffset = completionByOffset;
function completionByUniqueEntry(filePath, entry, begin) {
    if (begin === void 0) { begin = false; }
    var completionProvider = new index_1.CompletionProvider(new ContentProvider());
    var content = new FSContent(resolve(filePath));
    var position = new Position(begin ? (content.getText().indexOf(entry)) : offsetForEntry(entry, content.getText()));
    var result = completionProvider.suggest(new completion.CompletionRequest(content, position), true);
    return result.map(function (suggestion) { return suggestion.displayText || suggestion.text; }).join(', ');
}
exports.completionByUniqueEntry = completionByUniqueEntry;
//# sourceMappingURL=completionTestApi.js.map