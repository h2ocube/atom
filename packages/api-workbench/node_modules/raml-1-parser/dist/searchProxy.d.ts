import hl = require("./raml1/highLevelAST");
import ll = require("./raml1/lowLevelAST");
export declare enum LocationKind {
    VALUE_COMPLETION = 0,
    KEY_COMPLETION = 1,
    PATH_COMPLETION = 2,
    DIRECTIVE_COMPLETION = 3,
    VERSION_COMPLETION = 4,
    ANNOTATION_COMPLETION = 5,
    SEQUENCE_KEY_COPLETION = 6,
    INCOMMENT = 7,
}
export declare function determineCompletionKind(text: string, offset: number): LocationKind;
export declare function enumValues(c: hl.IProperty, n: hl.IHighLevelNode): string[];
export declare function globalDeclarations(n: hl.IHighLevelNode): hl.IHighLevelNode[];
export declare function qName(n: hl.IHighLevelNode, p: hl.IHighLevelNode): string;
export declare function subTypesWithLocals(t: hl.ITypeDefinition, n: hl.IHighLevelNode): hl.ITypeDefinition[];
export declare function nodesDeclaringType(t: hl.ITypeDefinition, n: hl.IHighLevelNode): hl.IHighLevelNode[];
export declare function isExampleNodeContent(n: hl.IAttribute): boolean;
export declare function findExampleContentType(n: hl.IAttribute): hl.ITypeDefinition;
export declare function parseDocumentationContent(n: hl.IAttribute, t: hl.ITypeDefinition): hl.IHighLevelNode;
export declare function parseStructuredExample(exampleNode: hl.IHighLevelNode, type: hl.INodeDefinition): hl.IHighLevelNode;
export declare function isExampleNode(node: hl.IHighLevelNode): boolean;
export declare function referenceTargets(p0: hl.IProperty, c: hl.IHighLevelNode): hl.IHighLevelNode[];
export interface FindUsagesResult {
    node: hl.IHighLevelNode;
    results: hl.IParseResult[];
}
export declare function findUsages(unit: ll.ICompilationUnit, offset: number): FindUsagesResult;
export declare function findDeclaration(unit: ll.ICompilationUnit, offset: number, nodePart?: LocationKind): ll.ICompilationUnit | hl.IParseResult;
