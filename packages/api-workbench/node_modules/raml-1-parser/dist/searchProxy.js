"use strict";
var search = require("./raml1/ast.core/search");
var hlimpl = require("./raml1/highLevelImpl");
(function (LocationKind) {
    LocationKind[LocationKind["VALUE_COMPLETION"] = 0] = "VALUE_COMPLETION";
    LocationKind[LocationKind["KEY_COMPLETION"] = 1] = "KEY_COMPLETION";
    LocationKind[LocationKind["PATH_COMPLETION"] = 2] = "PATH_COMPLETION";
    LocationKind[LocationKind["DIRECTIVE_COMPLETION"] = 3] = "DIRECTIVE_COMPLETION";
    LocationKind[LocationKind["VERSION_COMPLETION"] = 4] = "VERSION_COMPLETION";
    LocationKind[LocationKind["ANNOTATION_COMPLETION"] = 5] = "ANNOTATION_COMPLETION";
    LocationKind[LocationKind["SEQUENCE_KEY_COPLETION"] = 6] = "SEQUENCE_KEY_COPLETION";
    LocationKind[LocationKind["INCOMMENT"] = 7] = "INCOMMENT";
})(exports.LocationKind || (exports.LocationKind = {}));
var LocationKind = exports.LocationKind;
function determineCompletionKind(text, offset) {
    return search.determineCompletionKind(text, offset);
}
exports.determineCompletionKind = determineCompletionKind;
function enumValues(c, n) {
    return search.enumValues(c, n);
}
exports.enumValues = enumValues;
function globalDeclarations(n) {
    return search.globalDeclarations(n);
}
exports.globalDeclarations = globalDeclarations;
function qName(n, p) {
    return hlimpl.qName(n, p);
}
exports.qName = qName;
function subTypesWithLocals(t, n) {
    return search.subTypesWithLocals(t, n);
}
exports.subTypesWithLocals = subTypesWithLocals;
function nodesDeclaringType(t, n) {
    return search.nodesDeclaringType(t, n);
}
exports.nodesDeclaringType = nodesDeclaringType;
function isExampleNodeContent(n) {
    return search.isExampleNodeContent(n);
}
exports.isExampleNodeContent = isExampleNodeContent;
function findExampleContentType(n) {
    return search.findExampleContentType(n);
}
exports.findExampleContentType = findExampleContentType;
function parseDocumentationContent(n, t) {
    return search.parseDocumentationContent(n, t);
}
exports.parseDocumentationContent = parseDocumentationContent;
function parseStructuredExample(exampleNode, type) {
    return search.parseStructuredExample(exampleNode, type);
}
exports.parseStructuredExample = parseStructuredExample;
function isExampleNode(node) {
    return search.isExampleNode(node);
}
exports.isExampleNode = isExampleNode;
function referenceTargets(p0, c) {
    return search.referenceTargets(p0, c);
}
exports.referenceTargets = referenceTargets;
function findUsages(unit, offset) {
    return search.findUsages(unit, offset);
}
exports.findUsages = findUsages;
function findDeclaration(unit, offset, nodePart) {
    return search.findDeclaration(unit, offset, nodePart);
}
exports.findDeclaration = findDeclaration;
//# sourceMappingURL=searchProxy.js.map