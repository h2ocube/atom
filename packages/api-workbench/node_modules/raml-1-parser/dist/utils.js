"use strict";
var rs = require("./raml1/jsyaml/resourceRegistry");
var hlimpl = require("./raml1/highLevelImpl");
var defs = require("raml-definition-system");
var jsyaml = require("./raml1/jsyaml/jsyaml2lowLevel");
var expander = require("./raml1/ast.core/expander");
var linter = require("./raml1/ast.core/linter");
var builder = require("./raml1/ast.core/builder");
function hasAsyncRequests() {
    return rs.hasAsyncRequests();
}
exports.hasAsyncRequests = hasAsyncRequests;
function addLoadCallback(x) {
    rs.addLoadCallback(x);
}
exports.addLoadCallback = addLoadCallback;
function getTransformerNames() {
    return expander.getTransformNames();
}
exports.getTransformerNames = getTransformerNames;
exports.updateType = function (node) {
    var type = builder.doDescrimination(node);
    if (type == null && node.property()) {
        type = node.property().range();
    }
    if (type) {
        node.patchType(type);
    }
};
function getFragmentDefenitionName(node) {
    return hlimpl.getFragmentDefenitionName(node);
}
exports.getFragmentDefenitionName = getFragmentDefenitionName;
function genStructuredValue(name, parent, pr) {
    if (pr.range() instanceof defs.ReferenceType) {
        var t = pr.range();
        var mockNode = jsyaml.createNode(name);
        return new hlimpl.StructuredValue(mockNode, parent, pr);
    }
    else
        return name;
}
exports.genStructuredValue = genStructuredValue;
function parseUrl(u) {
    return new linter.UrlParameterNameValidator().parseUrl(u);
}
exports.parseUrl = parseUrl;
//# sourceMappingURL=utils.js.map