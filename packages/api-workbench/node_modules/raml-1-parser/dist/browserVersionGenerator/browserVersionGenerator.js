"use strict";
var fs = require("fs");
var path = require("path");
var mkdirp = require("mkdirp");
var webpack = require("webpack");
var fsutil = require("../util/fsutil");
var _ = require("underscore");
function createBrowserPackage(minify) {
    if (minify === void 0) { minify = true; }
    console.log("Minify: " + minify);
    var rootPath = path.join(__dirname, "../../");
    var rootFile = path.join(rootPath, "/dist/index.js");
    var targetFolder = path.join(rootPath, "browserVersion");
    var targetFile = path.join(targetFolder, "raml-1-parser.js");
    mkdirp.sync(targetFolder);
    copyStaticBrowserPackageContents(targetFolder, path.join(rootPath, "package.json"));
    webPackForBrowser(rootPath, rootFile, targetFile, minify);
}
/**
 *
 * @param parserRootFolder - full path to cloned parser repository root folder
 * @param rootFile - full path to parser index JS file
 * @param targetFileName
 * @param callback
 */
function webPackForBrowser(parserRootFolder, rootFile, targetFile, minify) {
    console.log("Preparing to Webpack browser bundle:");
    var plugins = [];
    // if (minify) {
    //     plugins.push(new webpack.optimize.UglifyJsPlugin({
    //         minimize: true,
    //         compress: { warnings: false }
    //     }));
    // }
    var relativeFilePath = path.relative(parserRootFolder, rootFile);
    relativeFilePath = "./" + relativeFilePath;
    var targetFolder = path.dirname(targetFile);
    var targetFileName = path.basename(targetFile);
    var config = {
        context: parserRootFolder,
        entry: relativeFilePath,
        output: {
            path: targetFolder,
            library: ['RAML', 'Parser'],
            filename: targetFileName,
            libraryTarget: "umd"
        },
        plugins: plugins,
        module: {
            loaders: [
                { test: /\.json$/, loader: "json" }
            ]
        },
        externals: [
            {
                // "buffer" : true,
                // "concat-stream" : true,
                // "esprima" : true,
                "fs": true,
                "libxml-xsd": true,
                "ws": true,
            }
        ],
        node: {
            console: false,
            global: true,
            process: true,
            Buffer: true,
            __filename: true,
            __dirname: true,
            setImmediate: true
        }
    };
    webpack(config, function (err, stats) {
        if (err) {
            console.log(err.message);
            return;
        }
        console.log("Webpack Building Browser Bundle:");
        console.log(stats.toString({ reasons: true, errorDetails: true }));
    });
}
function copyStaticBrowserPackageContents(browserDestinationPath, packageJsonPath) {
    var browserStaticPackagePath = path.resolve(__dirname, "../../src/browserVersionGenerator/static");
    if (!fs.existsSync(browserStaticPackagePath)) {
        console.log("Can not find static browser package: " + browserStaticPackagePath);
        return;
    }
    var packageJsonContents = fs.readFileSync(packageJsonPath).toString();
    var config = JSON.parse(packageJsonContents);
    var moduleVersion = config.version;
    var bowerJsonContents = fs.readFileSync(path.resolve(browserStaticPackagePath, "bower.json")).toString();
    var updatedBowerJsonContents = bowerJsonContents.replace("$version", moduleVersion);
    fs.writeFileSync(path.resolve(browserDestinationPath, "bower.json"), updatedBowerJsonContents);
    fsutil.copyDirSyncRecursive(path.resolve(browserDestinationPath, "examples"), path.resolve(browserStaticPackagePath, "examples"));
}
var args = process.argv;
if (_.find(args, function (arg) { return arg == "-dev"; })) {
    createBrowserPackage(false);
}
else {
    createBrowserPackage();
}
//# sourceMappingURL=browserVersionGenerator.js.map