
import hl = require("../highLevelAST");
import ll = require("../lowLevelAST");
import hlimpl = require("../highLevelImpl");
export interface PropertyValidator {
    validate(node: hl.IAttribute, cb: hl.ValidationAcceptor): any;
}
export interface IShema {
    validate(pObje: any, cb: hl.ValidationAcceptor, strict: boolean): any;
}
export declare var RESERVED_TEMPLATE_PARAMETERS: {
    "resourcePathName": string;
    "methodName": string;
    "resourcePath": string;
};
export declare function validateBasic(node: hlimpl.BasicASTNode, v: hl.ValidationAcceptor, requiredOnly?: boolean): void;
export declare function validate(node: hl.IParseResult, v: hl.ValidationAcceptor): void;
export declare function isValid(t: hl.ITypeDefinition, h: hl.IHighLevelNode, value: any, p: hl.IProperty, attr?: hl.IAttribute): any;
export declare class UrlParameterNameValidator implements PropertyValidator {
    private checkBaseUri(node, c, vl, v);
    parseUrl(value: string): string[];
    validate(node: hl.IAttribute, cb: hl.ValidationAcceptor): void;
}
export declare var typeToName: {};
export declare var parameterPropertyToName: {};
export declare function getHumanReadableNodeName(astNode: hl.IParseResult): any;
/**
 * validates examples
 */
export declare class ExampleAndDefaultValueValidator implements PropertyValidator {
    validate(node: hl.IAttribute, cb: hl.ValidationAcceptor): void;
    private isExampleNode(node);
    private isSingleExampleNode(node);
    private isExampleNodeInMultipleDecl(node);
    private findParentSchemaOrTypeAttribute(node);
    aquireSchema(node: hl.IAttribute): IShema;
    getSchemaFromModel(node: hl.IAttribute): IShema;
    private typeValidator(p, node);
    toObject(h: hl.IAttribute, v: hlimpl.StructuredValue, cb: hl.ValidationAcceptor): any;
    testDublication(h: hl.IAttribute, v: ll.ILowLevelASTNode, cb: hl.ValidationAcceptor): void;
    parseObject(node: hl.IAttribute, cb: hl.ValidationAcceptor, strictValidation: boolean): any;
    private isStrict(node);
}
export declare function isJson(s: string): boolean;
export declare function isXML(s: string): boolean;
export declare function getMediaType(node: hl.IAttribute): any;
export declare function toIssue(error: any, node: hl.IHighLevelNode): hl.ValidationIssue;
export declare function createIssue(c: hl.IssueCode, message: string, node: hl.IParseResult, w?: boolean): hl.ValidationIssue;
export declare function createLLIssue(issueCode: hl.IssueCode, message: string, node: ll.ILowLevelASTNode, rootCalculationAnchor: hl.IParseResult, isWarning?: boolean): hl.ValidationIssue;
export declare function validateResponseString(v: string): any;
