
import ll = require("../lowLevelAST");
export declare class NamespaceResolver {
    private expandedAbsToNsMap;
    private byPathMap;
    private byNsMap;
    private _hasFragments;
    resolveNamespace(from: ll.ICompilationUnit, to: ll.ICompilationUnit): string;
    expandedPathMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    private calculateExpandedNamespaces(_unit);
    pathMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    nsMap(unit: ll.ICompilationUnit): {
        [key: string]: UsesInfo;
    };
    private calculateNamespaces(unit);
    private lexLessEq(a, b);
    hasFragments(unit: ll.ICompilationUnit): boolean;
}
export declare class UsesInfo {
    namespaceSegments: string[];
    unit: ll.ICompilationUnit;
    includePath: string;
    constructor(namespaceSegments: string[], unit: ll.ICompilationUnit, includePath: string);
    steps(): number;
    namespace(): string;
    absolutePath(): string;
}
