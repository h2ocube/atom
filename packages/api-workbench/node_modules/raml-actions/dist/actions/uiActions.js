"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require("underscore");
var contextActions = require("../actionManagement/contextActions");
var contextActionsImpl = require("../actionManagement/contextActionsImpl");
var sharedCalculator = require("../actionManagement/sharedASTStateCalculator");
var parser = require("raml-1-parser");
var search = parser.search;
var universeHelpers = parser.universeHelpers;
var stubs = parser.stubs;
var path = require('path');
var utils = require("../actionManagement/utils");
var fs = require('fs');
var apiModifier = parser.parser.modify;
function standardToUIAction(original, initialUIStateConvertor, displayUI) {
    return {
        name: original.name,
        target: original.target,
        category: original.category,
        onClick: original.onClick,
        stateCalculator: original.stateCalculator,
        shouldDisplay: original.shouldDisplay,
        initialUIStateConvertor: initialUIStateConvertor,
        displayUI: displayUI
    };
}
function indent(line) {
    var rs = "";
    for (var i = 0; i < line.length; i++) {
        var c = line[i];
        if (c == '\r' || c == '\n') {
            continue;
        }
        if (c == ' ' || c == '\t') {
            rs += c;
            continue;
        }
        break;
    }
    return rs;
}
function stripIndent(text, indent) {
    var lines = utils.splitOnLines(text);
    var rs = [];
    for (var i = 0; i < lines.length; i++) {
        if (i == 0) {
            rs.push(lines[0]);
        }
        else {
            rs.push(lines[i].substring(indent.length));
        }
    }
    return rs.join("");
}
var MoveContentStateCalculator = (function (_super) {
    __extends(MoveContentStateCalculator, _super);
    function MoveContentStateCalculator() {
        _super.apply(this, arguments);
    }
    MoveContentStateCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        if (generalState.completionKind != search.LocationKind.KEY_COMPLETION)
            return null;
        var highLevelNode = generalState.node;
        if (highLevelNode.children().length == 0)
            return null;
        return highLevelNode;
    };
    return MoveContentStateCalculator;
}(sharedCalculator.CommonASTStateCalculator));
var moveContentsStateCalculator = new MoveContentStateCalculator();
var moveContents = {
    name: "Move content to other file",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Refactoring"],
    onClick: function (contextState, uiState) {
        var generalState = moveContentsStateCalculator.getGeneralState();
        var currentFilePath = generalState.editor.getPath();
        var destination = uiState;
        var node = contextState;
        var d = path.resolve(path.dirname(currentFilePath), destination);
        var replacements = [];
        var dump = node.lowLevel().dump();
        findIncludesInside(node.lowLevel()).forEach(function (include) {
            var includePath = include.includePath();
            if (path.isAbsolute(includePath)) {
                return;
            }
            var includeStart = include.start() - node.lowLevel().start();
            var includeEnd = include.end() - node.lowLevel().start();
            replacements.push({
                start: includeStart,
                end: includeEnd,
                oldText: dump.substring(includeStart, includeEnd),
                oldPath: includePath,
                newPath: path.relative(path.dirname(d), path.resolve(path.dirname(currentFilePath), includePath))
            });
        });
        var startIndex = 0;
        var splitted = [];
        replacements.forEach(function (replacement) {
            splitted.push(dump.substring(startIndex, replacement.start));
            splitted.push(dump.substring(replacement.start, replacement.end).replace(replacement.oldPath, replacement.newPath));
            startIndex = replacement.end;
        });
        splitted.push(dump.substring(startIndex));
        dump = splitted.join('');
        var ci = utils.splitOnLines(dump);
        var li = ci.length > 1 ? indent(ci[1]) : indent(ci[0]);
        dump = dump.substring(node.lowLevel().keyEnd() - node.lowLevel().start() + 1).trim();
        dump = stripIndent(dump, li);
        var ramlComment = node.definition().universe().version() === "RAML10" ? "#%RAML 1.0 " : "#%RAML 0.8 ";
        dump = ramlComment + node.definition().nameId() + "\n" + dump;
        fs.writeFileSync(d, dump);
        var txt = node.lowLevel().unit().contents();
        var endPart = txt.substring(node.lowLevel().end());
        var startPart = txt.substring(0, node.lowLevel().keyEnd() + 1);
        var vl = startPart + " !include " + destination + endPart;
        generalState.editor.setText(vl);
    },
    stateCalculator: moveContentsStateCalculator,
    shouldDisplay: function (state) { return state != null; }
};
function findIncludesInside(node) {
    var children = node.children();
    var result = [];
    if (children && children.length > 0) {
        children.forEach(function (child) {
            if (child.includePath()) {
                result.push(child);
                return;
            }
            result = result.concat(findIncludesInside(child));
        });
    }
    return result;
}
function isAbsolute(location) {
    if (!location) {
        return false;
    }
    if (path.isAbsolute(location)) {
        return true;
    }
    if (location.trim().toLowerCase().indexOf('http:/') === 0) {
        return true;
    }
    return false;
}
function registerMoveContentsAction(displayUI) {
    var uiAction = standardToUIAction(moveContents, null, displayUI);
    contextActionsImpl.addAction(uiAction);
}
exports.registerMoveContentsAction = registerMoveContentsAction;
var getKeyValue = function (offset, txt) {
    var m = offset;
    for (var i = offset; i >= 0; i--) {
        var c = txt.charAt(i);
        if (c == ' ' || c == '\r' || c == '\n' || c == '\t') {
            m = i + 1;
            break;
        }
    }
    var res = "";
    for (var i = m; i < txt.length; i++) {
        var c = txt.charAt(i);
        if (c == ' ' || c == '\r' || c == '\n' || c == '\t' || c == ':') {
            break;
        }
        res += c;
    }
    return res;
};
function saveExample(r, schp, content, editor) {
    var sdir = path.resolve(path.dirname(editor.getPath()), path.dirname(schp));
    if (!fs.existsSync(sdir)) {
        fs.mkdirSync(sdir);
    }
    var shFile = path.resolve(path.dirname(editor.getPath()), schp);
    fs.writeFileSync(shFile, content);
}
exports.saveExample = saveExample;
var CompleteBodyStateCalculator = (function (_super) {
    __extends(CompleteBodyStateCalculator, _super);
    function CompleteBodyStateCalculator() {
        _super.apply(this, arguments);
    }
    CompleteBodyStateCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        if (generalState.completionKind != search.LocationKind.KEY_COMPLETION)
            return null;
        var highLevelNode = generalState.node;
        if (universeHelpers.isResponseType(highLevelNode.definition()) ||
            universeHelpers.isMethodType(highLevelNode.definition())) {
            var txt = generalState.editor.getText();
            var res = getKeyValue(generalState.offset, txt);
            if (res == "body") {
                return highLevelNode;
            }
        }
        if (universeHelpers.isBodyLikeType(highLevelNode.definition())) {
            if (highLevelNode.elements().length == 0) {
                return highLevelNode;
            }
        }
        return null;
    };
    return CompleteBodyStateCalculator;
}(sharedCalculator.CommonASTStateCalculator));
var completeBody = {
    name: "Complete body",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Add new..."],
    onClick: function (contextState, uiState) {
        var parentOfParent = contextState.parent().parent();
        parentOfParent.lowLevel().show('BODY');
        var generalState = moveContentsStateCalculator.getGeneralState();
        var bodyType = contextState.definition().universe().type("BodyLike");
        if (bodyType) {
            var node = contextState;
            if (universeHelpers.isBodyProperty(node.property())) {
                node = node.parent();
            }
            var type = node.definition();
            if (uiState.needJSON) {
                var body = stubs.createStubNode(bodyType, type.property('name'), "application/json");
                body.createAttr("schema", uiState.name);
                body.createAttr("example", "!include ./examples/" + uiState.name + ".json");
                node.add(body);
                utils.createGlobalSchemaFromNameAndContent(parentOfParent.root(), uiState.name, "schemas/" + uiState.name + ".json", uiState.jsschema, generalState.editor);
                saveExample(parentOfParent, "./examples/" + uiState.name + ".json", uiState.jsexample, generalState.editor);
            }
            if (uiState.needXML) {
                var body = stubs.createStubNode(bodyType, type.property('name'), "application/xml");
                body.createAttr("schema", uiState.name + "-xml");
                body.createAttr("example", "!include ./examples/" + uiState.name + ".xml");
                node.add(body);
                var xmlSchemaContents = uiState.xmlschema;
                utils.createGlobalSchemaFromNameAndContent(parentOfParent.root(), uiState.name + "-xml", "schemas/" + uiState.name + ".xml", xmlSchemaContents, generalState.editor);
                saveExample(parentOfParent, "./examples/" + uiState.name + ".xml", uiState.xmlexample, generalState.editor);
            }
        }
        else {
            var response = contextState;
            if (!universeHelpers.isResponseType(response.property().range())) {
                console.log("Incorrect parent " + response.printDetails() + " , expecting response");
                return;
            }
            var responseWrapper = response.wrapperNode();
            var bodies = [];
            if (uiState.needJSON) {
                var typeName = "application/json";
                var bodyWrapper = apiModifier.createTypeDeclaration(typeName);
                apiModifier.setTypeDeclarationSchema(bodyWrapper, uiState.name);
                apiModifier.setTypeDeclarationExample(bodyWrapper, "!include ./examples/" + uiState.name + ".json");
                utils.createGlobalSchemaFromNameAndContent(parentOfParent.root(), uiState.name, "schemas/" + uiState.name + ".json", uiState.jsschema, generalState.editor);
                saveExample(parentOfParent, "./examples/" + uiState.name + ".json", uiState.jsexample, generalState.editor);
                bodies.push(bodyWrapper);
            }
            if (uiState.needXML) {
                var typeName = "application/xml";
                var bodyWrapper = apiModifier.createTypeDeclaration(typeName);
                apiModifier.setTypeDeclarationSchema(bodyWrapper, uiState.name + "-xml");
                apiModifier.setTypeDeclarationExample(bodyWrapper, "!include ./examples/" + uiState.name + ".xml");
                var xmlSchemaContents = uiState.xmlschema;
                utils.createGlobalSchemaFromNameAndContent(parentOfParent.root(), uiState.name + "-xml", "schemas/" + uiState.name + ".xsd", xmlSchemaContents, generalState.editor);
                saveExample(parentOfParent, "./examples/" + uiState.name + ".xml", uiState.xmlexample, generalState.editor);
                bodies.push(bodyWrapper);
            }
            bodies.forEach(function (bodyWrapper) {
                var foundWrapper = _.find(responseWrapper.body() || [], function (foundWrapper) { return bodyWrapper.name() === foundWrapper.name(); });
                if (foundWrapper) {
                    responseWrapper.remove(foundWrapper);
                }
                apiModifier.addChild(responseWrapper, bodyWrapper);
            });
        }
        var rs = parentOfParent.lowLevel().unit().contents();
        generalState.editor.setText(utils.cleanEmptyLines(rs));
    },
    stateCalculator: new CompleteBodyStateCalculator(),
    shouldDisplay: function (state) { return state != null; }
};
function registerCompleteBodyAction(displayUI) {
    var uiAction = standardToUIAction(completeBody, null, displayUI);
    contextActionsImpl.addAction(uiAction);
}
exports.registerCompleteBodyAction = registerCompleteBodyAction;
//# sourceMappingURL=uiActions.js.map