"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require("underscore");
var contextActions = require("../actionManagement/contextActions");
var sharedCalculator = require("../actionManagement/sharedASTStateCalculator");
var parser = require("raml-1-parser");
var search = parser.search;
var universeHelpers = parser.universeHelpers;
var def = parser.ds;
var su = parser.schema;
var stubs = parser.stubs;
var CommentNodeCalculator = (function (_super) {
    __extends(CommentNodeCalculator, _super);
    function CommentNodeCalculator() {
        _super.apply(this, arguments);
    }
    CommentNodeCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        return generalState;
    };
    return CommentNodeCalculator;
}(sharedCalculator.CommonASTStateCalculator));
function findLowLevelNodeByOffset(root, offset) {
    if ((root.keyStart() > offset || root.valueEnd() < offset) && root.parent()) {
        return null;
    }
    if (root.includedFrom()) {
        return findLowLevelNodeByOffset(root.includedFrom(), offset);
    }
    var children = root.children();
    for (var key in children) {
        var child = children[key];
        var result = findLowLevelNodeByOffset(child, offset);
        if (result)
            return result;
    }
    return root;
}
function lastChild(root) {
    if (root.includedFrom()) {
        return root.includedFrom();
    }
    if (!root.children() || root.children().length === 0) {
        return root;
    }
    return lastChild(root.children().filter(function (child) { return child ? true : false; })[root.children().length - 1]);
}
var ConvertTypeToJsonSchemaStateCalculator = (function (_super) {
    __extends(ConvertTypeToJsonSchemaStateCalculator, _super);
    function ConvertTypeToJsonSchemaStateCalculator() {
        _super.apply(this, arguments);
    }
    ConvertTypeToJsonSchemaStateCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        var highLevelNode = generalState.node;
        if (generalState.completionKind != search.LocationKind.KEY_COMPLETION
            && generalState.completionKind != search.LocationKind.VALUE_COMPLETION)
            return null;
        var txt = generalState.editor.getText();
        var attr = _.find(highLevelNode.attrs(), function (x) { return x.lowLevel().start() < generalState.offset && x.lowLevel().end() >= generalState.offset && !x.property().getAdapter(def.RAMLPropertyService).isKey(); });
        if (!attr)
            return null;
        if (!attr.value())
            return null;
        var p = attr.property();
        if (!universeHelpers.isTypeProperty(p))
            return null;
        return highLevelNode;
    };
    return ConvertTypeToJsonSchemaStateCalculator;
}(sharedCalculator.CommonASTStateCalculator));
var ConvertTypeToJsonSchemaAtTypeStateCalculator = (function (_super) {
    __extends(ConvertTypeToJsonSchemaAtTypeStateCalculator, _super);
    function ConvertTypeToJsonSchemaAtTypeStateCalculator() {
        _super.apply(this, arguments);
    }
    ConvertTypeToJsonSchemaAtTypeStateCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        var node = generalState.node;
        if (generalState.completionKind != search.LocationKind.SEQUENCE_KEY_COPLETION &&
            generalState.completionKind != search.LocationKind.KEY_COMPLETION)
            return null;
        return universeHelpers.isTypesProperty(node.property()) ? node : null;
    };
    return ConvertTypeToJsonSchemaAtTypeStateCalculator;
}(sharedCalculator.CommonASTStateCalculator));
var DeleteCurrentNodeStateCalculator = (function (_super) {
    __extends(DeleteCurrentNodeStateCalculator, _super);
    function DeleteCurrentNodeStateCalculator() {
        _super.apply(this, arguments);
    }
    DeleteCurrentNodeStateCalculator.prototype.calculate = function () {
        var generalState = this.getGeneralState();
        if (!generalState)
            return null;
        var highLevelNode = generalState.node;
        if (universeHelpers.isApiType(highLevelNode.definition()))
            return null;
        return highLevelNode;
    };
    return DeleteCurrentNodeStateCalculator;
}(sharedCalculator.CommonASTStateCalculator));
function doDeleteNode(node, modifier) {
    if (!node || !node.parent())
        return false;
    var parent = node.parent();
    if (modifier) {
        modifier.deleteNode(node);
    }
    else if (parent) {
        parent.remove(node);
    }
    if (modifier && parent) {
        modifier.updateText(parent.lowLevel());
    }
}
var expandTypeToJSONSchemaDefinitionCalculator = new ConvertTypeToJsonSchemaAtTypeStateCalculator();
exports.expandTypeToJSONSchemaDefinition = {
    name: "Expand type to JSON schema definition",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Refactoring"],
    onClick: function (state) {
        var typenode = state;
        var api = typenode.root();
        var obj = su.createModelToSchemaGenerator().generateSchema(typenode);
        var schema = JSON.stringify(obj, null, 2);
        console.log('schema: ' + schema);
        var generalState = expandTypeToJSONSchemaDefinitionCalculator.getGeneralState();
        doDeleteNode(state, generalState.astModifier);
        var typesProperty = state.root().definition().property("types");
        var typeStub = stubs.createStubNode(state.definition().universe().type("TypeDeclaration"), typesProperty);
        typeStub.attrOrCreate('name').setValue(typenode.name());
        typeStub.attrOrCreate('type').setValue(schema);
        state.root().add(typeStub);
        var text = api.lowLevel().unit().contents();
        expandTypeToJSONSchemaDefinitionCalculator.getGeneralState().editor.setText(text);
    },
    stateCalculator: expandTypeToJSONSchemaDefinitionCalculator,
    shouldDisplay: function (state) { return state != null; }
};
var deleteNodeStateCalculator = new DeleteCurrentNodeStateCalculator();
exports.deleteNode = {
    name: "Delete current node",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Code"],
    onClick: function (node) {
        var generalState = deleteNodeStateCalculator.getGeneralState();
        doDeleteNode(node, generalState.astModifier);
    },
    stateCalculator: deleteNodeStateCalculator,
    shouldDisplay: function (state) { return state != null; }
};
var expandTypeToJSONSchemaCalculator = new ConvertTypeToJsonSchemaStateCalculator();
exports.expandTypeToJSONSchema = {
    name: "Expand type to JSON schema",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Refactoring"],
    onClick: function (state) {
        var node = state;
        var api = node.root();
        var type = node.attrValue('type');
        var types = api.elementsOfKind('types');
        var typeNode = _.find(types, function (y) { return y.name() == type; });
        if (typeNode) {
            node.attr('type').setValue('');
            var obj = su.createModelToSchemaGenerator().generateSchema(typeNode);
            var text = JSON.stringify(obj, null, 2);
            node.attrOrCreate('schema').setValue(text);
            text = api.lowLevel().unit().contents();
            expandTypeToJSONSchemaCalculator.getGeneralState().editor.setText(text);
        }
    },
    stateCalculator: expandTypeToJSONSchemaCalculator,
    shouldDisplay: function (state) { return state != null; }
};
exports.commentNode = {
    name: "Comment node",
    target: contextActions.TARGET_RAML_EDITOR_NODE,
    category: ["Code"],
    onClick: function (state) {
        var highLevelNode = state.node;
        if (!highLevelNode.lowLevel())
            return;
        var lowLevelNode = findLowLevelNodeByOffset(highLevelNode.lowLevel(), state.offset);
        if (!lowLevelNode)
            return;
        var startOffset = lowLevelNode.keyStart() > -1 ? lowLevelNode.keyStart() : lowLevelNode.start();
        lowLevelNode = lastChild(lowLevelNode);
        var endOffset = lowLevelNode.valueEnd() > -1 ? lowLevelNode.valueEnd() : lowLevelNode.end();
        var buffer = state
            .editor.getBuffer();
        var startPosition = buffer.positionForCharacterIndex(startOffset);
        var startLine = startPosition.row;
        var endPosition = buffer.positionForCharacterIndex(endOffset);
        var endLine = endPosition.row;
        for (var lineNumber = startLine; lineNumber <= endLine; lineNumber++) {
            var oldRange = buffer.rangeForRow(lineNumber, true);
            var oldText = buffer.getTextInRange(oldRange);
            var newText = "#" + oldText;
            buffer.setTextInRange(oldRange, newText);
        }
    },
    stateCalculator: new CommentNodeCalculator(),
    shouldDisplay: function (state) { return state != null; }
};
//# sourceMappingURL=standardActions.js.map