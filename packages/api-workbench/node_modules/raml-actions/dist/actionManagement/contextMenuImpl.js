"use strict";
var _ = require("underscore");
var contextActions = require("./contextActions");
var contextActionsImpl = require("./contextActionsImpl");
var contributors = {};
function registerContributor(contributor) {
    contributors[contributor.id] = contributor;
}
exports.registerContributor = registerContributor;
function addMenuItem(name, onClick, categories, shouldDisplay) {
}
exports.addMenuItem = addMenuItem;
function deleteMenuItems(selector) {
}
exports.deleteMenuItems = deleteMenuItems;
function deleteMenuItem(selector, name, categories) {
}
exports.deleteMenuItem = deleteMenuItem;
var ContextMenuItemNode = (function () {
    function ContextMenuItemNode(menuItem, nameOverride) {
        this.selector = menuItem.selector;
        if (nameOverride) {
            this.name = nameOverride;
        }
        else {
            this.name = menuItem.name;
        }
        this.categories = menuItem.categories;
        this.onClick = menuItem.onClick;
        this.children = [];
    }
    return ContextMenuItemNode;
}());
function calculateMenuItemsTree() {
    var result = [];
    for (var contributorId in contributors) {
        var contributor = contributors[contributorId];
        if (contributor.calculationStarted) {
            contributor.calculationStarted();
        }
    }
    for (var contributorId in contributors) {
        var contributor = contributors[contributorId];
        contributor.calculateItems().forEach(function (item) {
            addItemsTreeNode(result, item);
        });
    }
    for (var contributorId in contributors) {
        var contributor = contributors[contributorId];
        if (contributor.calculationFinished) {
            contributor.calculationFinished();
        }
    }
    return result;
}
exports.calculateMenuItemsTree = calculateMenuItemsTree;
function addItemsTreeNode(roots, item) {
    var currentList = roots;
    if (item.categories) {
        for (var catIndex in item.categories) {
            var currentSegment = item.categories[catIndex];
            var existingNode = _.find(currentList, function (node) {
                return node.name == currentSegment;
            });
            if (!existingNode) {
                existingNode = new ContextMenuItemNode(item, currentSegment);
                currentList.push(existingNode);
            }
            if (!existingNode.children) {
                currentList = [];
                existingNode.children = currentList;
            }
            else {
                currentList = existingNode.children;
            }
        }
    }
    var leafNode = _.find(currentList, function (node) {
        return node.name == item.name;
    });
    if (leafNode) {
        var index = currentList.indexOf(leafNode, 0);
        if (index != undefined) {
            currentList.splice(index, 1);
        }
    }
    leafNode = new ContextMenuItemNode(item);
    currentList.push(leafNode);
}
var actionBasedMenuInitialized = false;
function initializeActionBasedMenu(selector) {
    var editorContextMenuContributor = {
        id: "editorContextActionContributor",
        calculateItems: function () {
            var currentActions = contextActionsImpl.calculateCurrentActions(contextActions.TARGET_RAML_EDITOR_NODE);
            if (!currentActions)
                return [];
            var result = [];
            currentActions.forEach(function (action) {
                result.push({
                    selector: selector,
                    name: action.label ? action.label : action.name,
                    categories: action.category,
                    onClick: action.onClick,
                    children: []
                });
            });
            return result;
        }
    };
    registerContributor(editorContextMenuContributor);
    actionBasedMenuInitialized = true;
}
exports.initializeActionBasedMenu = initializeActionBasedMenu;
//# sourceMappingURL=contextMenuImpl.js.map