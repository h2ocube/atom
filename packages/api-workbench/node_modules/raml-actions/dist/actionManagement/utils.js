"use strict";
var path = require("path");
var fs = require("fs");
var parser = require("raml-1-parser");
var stubs = parser.stubs;
var universes = parser.universes;
var universeHelpers = parser.universeHelpers;
function dirname(pathStr) {
    return path.dirname(pathStr);
}
exports.dirname = dirname;
function basename(pathStr) {
    return path.basename(pathStr);
}
exports.basename = basename;
function extname(pathStr) {
    return path.extname(pathStr);
}
exports.extname = extname;
function splitOnLines(text) {
    var lines = text.match(/^.*((\r\n|\n|\r)|$)/gm);
    return lines;
}
exports.splitOnLines = splitOnLines;
function createGlobalSchemaFromNameAndContent(root, name, schp, content, editor, absolutePath) {
    if (universeHelpers.isRAML10Node(root)) {
        createGlobalSchemaFromNameAndContent10(root, name, schp, content, editor, absolutePath);
    }
    else if (universeHelpers.isRAML08Node(root)) {
        createGlobalSchemaFromNameAndContent08(root, name, schp, content, editor, absolutePath);
    }
}
exports.createGlobalSchemaFromNameAndContent = createGlobalSchemaFromNameAndContent;
function createSchemaFile(content, schemaPath, editor, absolutePath) {
    var sdir = absolutePath ? path.dirname(absolutePath) : path.resolve(path.dirname(editor.getPath()), path.dirname(schemaPath));
    if (!fs.existsSync(sdir)) {
        fs.mkdirSync(sdir);
    }
    var shFile = absolutePath ? absolutePath : path.resolve(path.dirname(editor.getPath()), schemaPath);
    fs.writeFileSync(shFile, content);
}
function createGlobalSchemaFromNameAndContent10(root, name, schemaPath, content, editor, absolutePath) {
    var t = root.definition().universe().type(universes.Universe10.TypeDeclaration.name);
    var sc = stubs.createStubNode(t, t.universe().type(universes.Universe10.Api.name).property(universes.Universe10.Api.properties.types.name), "" + name);
    sc.attrOrCreate(universes.Universe10.TypeDeclaration.properties.type.name).setValue("!include " + schemaPath);
    root.add(sc);
    createSchemaFile(content, schemaPath, editor, absolutePath);
}
exports.createGlobalSchemaFromNameAndContent10 = createGlobalSchemaFromNameAndContent10;
function createGlobalSchemaFromNameAndContent08(root, name, schp, content, editor, absolutePath) {
    var t = root.definition().universe().type(universes.Universe08.GlobalSchema.name);
    var sc = stubs.createStubNode(t, t.universe().type(universes.Universe08.Api.name).property(universes.Universe08.Api.properties.schemas.name), "" + name);
    sc.attrOrCreate(universes.Universe08.GlobalSchema.properties.value.name).setValue("!include " + schp);
    root.add(sc);
    createSchemaFile(content, schp, editor, absolutePath);
}
exports.createGlobalSchemaFromNameAndContent08 = createGlobalSchemaFromNameAndContent08;
function cleanEmptyLines(text) {
    var lines = splitOnLines(text);
    var rs = [];
    for (var i = 0; i < lines.length; i++) {
        if (lines[i].trim().length > 0) {
            rs.push(lines[i]);
        }
    }
    return rs.join("");
}
exports.cleanEmptyLines = cleanEmptyLines;
//# sourceMappingURL=utils.js.map