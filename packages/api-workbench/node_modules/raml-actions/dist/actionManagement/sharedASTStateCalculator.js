"use strict";
exports.parser = require("raml-1-parser");
var search = exports.parser.search;
var utils = require("./utils");
function setEditorProvider(editorProvider) {
    exports.generalASTStateCalculator.setEditorProvider(editorProvider);
}
exports.setEditorProvider = setEditorProvider;
function setASTProvider(astProvider) {
    exports.generalASTStateCalculator.setASTProvider(astProvider);
}
exports.setASTProvider = setASTProvider;
function setASTModifier(astModifier) {
    exports.generalASTStateCalculator.setASTModifier(astModifier);
}
exports.setASTModifier = setASTModifier;
var NullCalculator = (function () {
    function NullCalculator() {
    }
    NullCalculator.prototype.calculate = function () {
    };
    return NullCalculator;
}());
exports.NullCalculator = NullCalculator;
var EditorBasedASTProvider = (function () {
    function EditorBasedASTProvider(editorProvider) {
        this.editorProvider = editorProvider;
    }
    EditorBasedASTProvider.prototype.getASTRoot = function () {
        var editor = this.editorProvider.getCurrentEditor();
        if (!editor)
            return null;
        var filePath = editor.getPath();
        var prj = exports.parser.project.createProject(utils.dirname(filePath));
        var offset = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());
        var text = editor.getBuffer().getText();
        var unit = prj.setCachedUnitContent(utils.basename(filePath), text);
        return unit.highLevel();
    };
    EditorBasedASTProvider.prototype.getSelectedNode = function () {
        var editor = this.editorProvider.getCurrentEditor();
        if (!editor)
            return null;
        var ast = this.getASTRoot();
        if (!ast)
            return null;
        var offset = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());
        var modifiedOffset = offset;
        var text = editor.getText();
        for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {
            var currentCharacter = text[currentOffset];
            if (currentCharacter == ' ' || currentCharacter == '\t') {
                modifiedOffset = currentOffset - 1;
                continue;
            }
            break;
        }
        var astNode = ast.findElementAtOffset(modifiedOffset);
        if (!astNode) {
            return ast;
        }
        return astNode;
    };
    return EditorBasedASTProvider;
}());
var GeneralASTStateCalculator = (function () {
    function GeneralASTStateCalculator() {
        var _this = this;
        this.state = null;
        this.contextCalculationStarted = function () {
            if (_this.state == null) {
                _this.state = _this.calculateState();
            }
        };
        this.contextCalculationFinished = function () {
            _this.state = null;
        };
    }
    GeneralASTStateCalculator.prototype.calculate = function () {
        if (this.state == null) {
            this.state = this.calculateState();
        }
        return this.state;
    };
    GeneralASTStateCalculator.prototype.calculateState = function () {
        if (!this.editorProvider) {
            return {
                editor: null,
                offset: 0,
                node: null,
                completionKind: null
            };
        }
        var editor = this.editorProvider.getCurrentEditor();
        var astProvider = this.astProvider;
        if (!astProvider)
            astProvider = new EditorBasedASTProvider(this.editorProvider);
        var gotEditorFromOutline = false;
        if (!editor)
            return null;
        if (utils.extname(editor.getPath()) != '.raml')
            return null;
        var request = {
            editor: editor,
            bufferPosition: editor.getCursorBufferPosition()
        };
        var node = astProvider.getSelectedNode();
        if (editor.getBuffer()) {
            var lastPosition = editor.getBuffer().getEndPosition();
            if (lastPosition.column == request.bufferPosition.column
                && lastPosition.row == request.bufferPosition.row) {
                return null;
            }
            if (request.bufferPosition.row == 0 && request.bufferPosition.column == 0) {
                return null;
            }
        }
        if (!node) {
            return null;
        }
        var offset = request.editor.getBuffer().
            characterIndexForPosition(request.bufferPosition);
        var completionKind = search.determineCompletionKind(editor.getBuffer().getText(), offset);
        return {
            editor: editor,
            offset: offset,
            node: node,
            completionKind: completionKind,
            astModifier: this.astModifier
        };
    };
    GeneralASTStateCalculator.prototype.setEditorProvider = function (editorProvider) {
        this.editorProvider = editorProvider;
    };
    GeneralASTStateCalculator.prototype.setASTProvider = function (astProvider) {
        this.astProvider = astProvider;
    };
    GeneralASTStateCalculator.prototype.setASTModifier = function (astModifier) {
        this.astModifier = astModifier;
    };
    GeneralASTStateCalculator.prototype.getEditor = function () {
        if (!this.editorProvider)
            return null;
        return this.editorProvider.getCurrentEditor();
    };
    return GeneralASTStateCalculator;
}());
exports.GeneralASTStateCalculator = GeneralASTStateCalculator;
exports.generalASTStateCalculator = new GeneralASTStateCalculator();
var CommonASTStateCalculator = (function () {
    function CommonASTStateCalculator() {
        this.contextCalculationStarted = function () {
            exports.generalASTStateCalculator.contextCalculationStarted();
        };
        this.contextCalculationFinished = function () {
            exports.generalASTStateCalculator.contextCalculationFinished();
        };
    }
    CommonASTStateCalculator.prototype.calculate = function () {
        return null;
    };
    CommonASTStateCalculator.prototype.getGeneralState = function () {
        return exports.generalASTStateCalculator.calculate();
    };
    CommonASTStateCalculator.prototype.getEditor = function () {
        return exports.generalASTStateCalculator.getEditor();
    };
    return CommonASTStateCalculator;
}());
exports.CommonASTStateCalculator = CommonASTStateCalculator;
//# sourceMappingURL=sharedASTStateCalculator.js.map