"use strict";
var _ = require("underscore");
function addAction(action) {
    if (_.find(actions, function (currentAction) {
        return currentAction.name == action.name;
    })) {
        return;
    }
    actions.push(action);
}
exports.addAction = addAction;
function addSimpleAction(name, category, target, onClick, shouldDisplay) {
    var newAction = {
        name: name,
        target: target,
        onClick: onClick,
        shouldDisplay: shouldDisplay,
        category: category
    };
    addAction(newAction);
}
exports.addSimpleAction = addSimpleAction;
function instanceofUIAction(action) {
    return action.displayUI && typeof (action.displayUI) == "function";
}
exports.instanceofUIAction = instanceofUIAction;
var ExecutableAction = (function () {
    function ExecutableAction(targetAction, state) {
        var _this = this;
        this.name = targetAction.name;
        this.category = targetAction.category;
        this.label = targetAction.label;
        this.target = targetAction.target;
        this.state = state;
        this.originalAction = targetAction;
        this.onClick = function () {
            if (instanceofUIAction(targetAction)) {
                var initialUIState = _this.state;
                if (targetAction.initialUIStateConvertor)
                    initialUIState = targetAction.initialUIStateConvertor(initialUIState);
                targetAction.displayUI(function (finalUIState) {
                    _this.originalAction.onClick(_this.state, finalUIState);
                }, initialUIState);
            }
            else {
                _this.originalAction.onClick(_this.state);
            }
        };
    }
    return ExecutableAction;
}());
function calculateCurrentActions(target) {
    var result = [];
    try {
        var filteredActions = actions.filter(function (action) {
            return action.target == target;
        });
        filteredActions.forEach(function (action) {
            if (action.stateCalculator) {
                if (action.stateCalculator.contextCalculationStarted) {
                    try {
                        action.stateCalculator.contextCalculationStarted();
                    }
                    catch (Error) {
                        console.error(Error.message);
                    }
                }
            }
        });
        filteredActions.forEach(function (action) {
            try {
                var state = null;
                if (action.stateCalculator) {
                    state = action.stateCalculator.calculate();
                }
                if (action.shouldDisplay) {
                    if (!action.shouldDisplay(state)) {
                        return;
                    }
                }
                result.push(new ExecutableAction(action, state));
            }
            catch (Error) {
                console.error(Error.message);
            }
        });
        filteredActions.forEach(function (action) {
            if (action.stateCalculator) {
                if (action.stateCalculator.contextCalculationFinished) {
                    try {
                        action.stateCalculator.contextCalculationFinished();
                    }
                    catch (Error) {
                        console.error(Error.message);
                    }
                }
            }
        });
    }
    catch (Error) {
        console.error(Error.message);
    }
    return result;
}
exports.calculateCurrentActions = calculateCurrentActions;
function getCategorizedActionLabel(action) {
    if (action.label) {
        return action.label;
    }
    var result = "api-workbench:";
    if (action.category) {
        action.category.forEach(function (cat) {
            result = result + cat + ": ";
        });
    }
    result = result + action.name;
    return result;
}
exports.getCategorizedActionLabel = getCategorizedActionLabel;
var initialized = false;
var actions = [];
//# sourceMappingURL=contextActionsImpl.js.map