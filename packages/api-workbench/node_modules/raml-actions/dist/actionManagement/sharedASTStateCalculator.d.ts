import contextActions = require("./contextActions");
export import parser = require("raml-1-parser");
import search = parser.search;
import hl = parser.hl;
import ll = parser.ll;
export interface IPoint {
    row: number;
    column: number;
}
export interface IRange {
    start: IPoint;
    end: IPoint;
}
export interface IEditorTextBuffer {
    positionForCharacterIndex(offset: number): IPoint;
    characterIndexForPosition(position: IPoint): number;
    rangeForRow(row: number, includeNewline?: boolean): IRange;
    getTextInRange(range: IRange): string;
    setTextInRange(range: IRange, text: string, normalizeLineEndings?: boolean): IRange;
    getText(): string;
    getEndPosition(): IPoint;
}
export interface IAbstractTextEditor {
    getText(): string;
    getBuffer(): IEditorTextBuffer;
    getPath(): any;
    getCursorBufferPosition(): IPoint;
    setText(text: string): any;
}
export interface IGeneralASTState {
    editor: IAbstractTextEditor;
    offset: number;
    node: hl.IParseResult;
    completionKind: search.LocationKind;
    astModifier?: IASTModifier;
}
export interface IEditorProvider {
    getCurrentEditor(): IAbstractTextEditor;
}
export declare function setEditorProvider(editorProvider: IEditorProvider): void;
export interface IASTProvider {
    getASTRoot(): hl.IHighLevelNode;
    getSelectedNode(): hl.IParseResult;
}
export declare function setASTProvider(astProvider: IASTProvider): void;
export interface IASTModifier {
    deleteNode(node: hl.IParseResult): any;
    updateText(node: ll.ILowLevelASTNode): any;
}
export declare function setASTModifier(astModifier: IASTModifier): void;
export declare class NullCalculator implements contextActions.IContextStateCalculator {
    calculate(): any;
}
export declare class GeneralASTStateCalculator implements contextActions.IContextStateCalculator {
    private state;
    private editorProvider;
    private astProvider;
    private astModifier;
    calculate(): any;
    contextCalculationStarted: () => void;
    contextCalculationFinished: () => void;
    private calculateState();
    setEditorProvider(editorProvider: IEditorProvider): void;
    setASTProvider(astProvider: IASTProvider): void;
    setASTModifier(astModifier: IASTModifier): void;
    getEditor(): IAbstractTextEditor;
}
export declare var generalASTStateCalculator: GeneralASTStateCalculator;
export declare class CommonASTStateCalculator implements contextActions.IContextStateCalculator {
    calculate(): any;
    getGeneralState(): IGeneralASTState;
    contextCalculationStarted: () => void;
    contextCalculationFinished: () => void;
    getEditor(): IAbstractTextEditor;
}
